#include "sys/alt_stdio.h"
#include "altera_avalon_uart_regs.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
#include "sys/alt_irq.h"

alt_u8 uart_en = 0;
alt_u8 i=0;
alt_u8 rx_data[256],tx_data[256];
alt_u8 tx_len,rx_len;

alt_isr_func key_isr(void)
{
    alt_u8 data;
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_LED_BASE, 0x00); //Close key interrupt
    data = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_LED_BASE);
    if(data == 0x30)
    {

    }
    else if(data & 0x10)
    {
        uart_en = 1;
    }
    else if(data & 0x20)
    {

    }
         IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_LED_BASE, 0x30); //Clear all capture bits
         IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_LED_BASE, 0x30); //Close key interrupt
    return 0;
}

void key_init()
{
    char *p;
    alt_ic_isr_register(PIO_LED_IRQ_INTERRUPT_CONTROLLER_ID,
                        PIO_LED_IRQ,
                        key_isr,
                        p,
                        0);

         IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_LED_BASE, 0x0f); //Set the lower 4 bits as output and the upper 2 bits as input
         IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_LED_BASE, 0x30); //Clear all capture bits
         IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_LED_BASE, 0x30); //Turn on key interrupt
}

alt_isr_func uart_0_isr(void)
{
    alt_u16 status;

    status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    if(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    {
        rx_data[rx_len] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
        rx_len ++ ;
    }

    if(status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
        if(tx_len)
        {
            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_data[tx_len]);
            tx_len--;
            if(!tx_len)
            {
                                 IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, 0x80); //Turn off the sending interrupt

            }
        }
    }
    return 0;
}

void uart_0_init()
{
    char *p;
    alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,
                        UART_0_IRQ,
                        uart_0_isr,
                        p,
                        0);

         IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x0); //Clear status register
         IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //Read the useless value in the empty receive register
         IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, UART_0_FREQ/9600-1);//Set the baud rate to 115200
         IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, 0x80); //Enable receive interrupt
}

void uart_tx(alt_u8 *data, alt_u8 len)
{
    tx_len = len;
    while(len)
    {
        tx_data[len] = *data;
        data++;
        len -- ;
    }
         IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, 0x80 | 0x40); //Enable transmission interrupt
}

int main()
{
    key_init();
    uart_0_init();

    while(1)
    {
        if(uart_en)
        {
            uart_tx(rx_data, rx_len);
            rx_len = 0;
            uart_en = 0;
        }
    }

  return 0;
}
