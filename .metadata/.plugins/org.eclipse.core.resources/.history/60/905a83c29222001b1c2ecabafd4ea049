/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "altera_avalon_i2c.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_regs.h"
#define I2C_AUDIO_ADDR  26      //  AUDIO I2C
#define MAX_I16 32767
#define MIN_I16 -32767

int binary[32];

void decToBinary(int n)
{
    // array to store binary number
    int binaryNum[32];
    int binary[32];

    // counter for binary array
    int i = 0;
    while (n > 0) {

        // storing remainder in binary array
        binaryNum[i] = n % 2;
        n = n / 2;
        i++;
    }

    // printing binary array in reverse order
    i = 0;
    for (int j = i - 1; j >= 0; j--)
    {
    	binary[i] = binaryNum[j];
    	i++;
    }

}

int main()
{

  // sound sample to write in audio CODEC IC
  signed short int sample[64] = { MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,
								  MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,
								  MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,
								  MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,
								  MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,
								  MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,MAX_I16,
								  MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,
								  MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,MIN_I16,};
   alt_up_audio_dev *audio_dev;
   ALT_AVALON_I2C_DEV_t *i2c_dev;

   ALT_AVALON_I2C_STATUS_CODE status;

   alt_u8 AUDIO_CODEC_LEFT_ADC[2]  =  {2*0, 0b00011011};
   alt_u8 AUDIO_CODEC_RIGHT_ADC[2]  = {2*1, 0b00011011};
   alt_u8 AUDIO_CODEC_LEFT_DAC[2]  =  {2*2, 0b001111001};
   alt_u8 AUDIO_CODEC_RIGHT_DAC[2]  = {2*3, 0b001111001};
   alt_u8 AUDIO_CODEC_POWER_DOWN[2]  = {2*6, 0b11101111};
   alt_u8 AUDIO_CODEC_SAMPLING_RATE[2]  = { 2*8, 0b00001110};  //SR = 0011; BOSR = 1; USB = 0, sf  = 8 khz
   alt_u8 AUDIO_CODEC_ANALOG_PATH[2] = {2*4, 0b00010101}; // INSEL = 1 (microphone input select to ADC)
   alt_u8 AUDIO_CODEC_DIGITAL_PATH[2] = {2*5, 0b00000000}; // DACMU = 0 = no mute (signal active)
   alt_u8 AUDIO_CODEC_DIGITAL_IF[2] = {2*7, 0b1100001}; // FORMAT =  left justified,WL = 16, MASTER mode
   alt_u8 AUDIO_CODEC_POWER_UP[2] = {2*6, 0b00000000};
   alt_u8 AUDIO_CODEC_ACTIVATE[2] = {2*9, 0b00000001};

   alt_u8 i2c_rx_buf[2] = {0,0};
   alt_u8 cmd_buff[1] = {0};
   alt_u32 i2c_addr_check = 0;
   alt_u8 issue_restart_check = 0;
   alt_u8 issue_stop_check = 0;

   unsigned int  number = 0;


   int fifospace = 0;

   // open audio and i2c devices
   audio_dev = alt_up_audio_open_dev (AUDIO_0_NAME);
   i2c_dev = alt_avalon_i2c_open(I2C_0_NAME);

   if ( audio_dev == NULL)
	   alt_printf ("Error: could not open audio device \n");
   else
	   alt_printf ("Opened audio device \n");

   if ( i2c_dev == NULL)
	   alt_printf ("Error: could not open I2C device \n");
   else
	   alt_printf ("Opened I2C device \n");

   // enable i2c module and print status
   printf ( "Status = %d\n", alt_avalon_i2c_enable(i2c_dev));
   //set i2c target adress
   alt_avalon_i2c_master_target_set(i2c_dev,I2C_AUDIO_ADDR);

   //disable before alt_avalon_i2c_master_tx()
   alt_avalon_i2c_disable(i2c_dev);

   // set SSM2603 registers
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_POWER_DOWN,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_SAMPLING_RATE,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_LEFT_ADC,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_RIGHT_ADC,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_LEFT_DAC,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_RIGHT_DAC,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_ANALOG_PATH,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_DIGITAL_PATH,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_DIGITAL_IF,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_POWER_UP,2,ALT_AVALON_I2C_NO_INTERRUPTS);
     usleep(100000);

     // activate SSM2603
     status = alt_avalon_i2c_master_tx(i2c_dev,AUDIO_CODEC_ACTIVATE,2,ALT_AVALON_I2C_NO_INTERRUPTS);

     //alt_avalon_i2c_disable(i2c_dev);
     //check the values written in regs
     alt_avalon_i2c_disable(i2c_dev);
     for(int i = 0; i < 16; i++)
     {
    	 cmd_buff[0] = i*2;
         status = alt_avalon_i2c_master_tx_rx(i2c_dev,cmd_buff,1,i2c_rx_buf,2,ALT_AVALON_I2C_NO_INTERRUPTS);
        	     if (status!=ALT_AVALON_I2C_SUCCESS)
        	    	 {
        	    	 printf("Read reg[%d] failed = %d\n",i,status); // FAIL
        	    	 }
        	     else printf("Read reg[%d] \%d %d \n",i,i2c_rx_buf[1],i2c_rx_buf[0]);
     }


  printf("Hello from Janis Sate III!\n");

  alt_up_audio_reset_audio_core(audio_dev);
  while(1)
  {
	  fifospace = alt_up_audio_write_fifo_space (audio_dev, ALT_UP_AUDIO_RIGHT);
	  if ( fifospace >= 64 ) // check if free space in write fifo is available
	  {
		  alt_up_audio_write_fifo (audio_dev, sample, 64, ALT_UP_AUDIO_RIGHT);
		  alt_up_audio_write_fifo (audio_dev, sample, 64, ALT_UP_AUDIO_LEFT);
	  }
	  number = IORD_ALTERA_AVALON_PIO_DATA(SW_PIO_BASE);
	  decToBinary(number);
	  printf("Number = %d   ", number);
	  printf("Binary = %d\n", binary);
	     usleep(500000);
  }

  return 0;
}
