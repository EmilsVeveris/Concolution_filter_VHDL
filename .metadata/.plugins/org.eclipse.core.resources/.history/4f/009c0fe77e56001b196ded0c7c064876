# include <stdio.h>
# include <stdint.h>
# include "altera_avalon_pio_regs.h"
# include "system.h"
# include "sys/alt_stdio.h"
# include "alt_types.h"
# include "altera_avalon_uart.h"
# include <string.h>
#include <math.h>

uint32_t isKthBitSet(int n, int k)
{
    if (n & (1 << (k - 1)))
        return 1;
    else
        return 0;
}

int Log2( int n )
{
    // log(n)/log(2) is log2.
    return log( n ) / log( 2 );
}

int main()
{

	alt_u32 *pBuf;
	alt_u32 lenght = 60000000;
	pBuf = (alt_u32 *)MEM_IF_LPDDR2_EMIF_0_BASE;
	pBuf = malloc(lenght * sizeof(alt_u32));
	if(!pBuf)
	{
		printf("Malloc fail\r\n");
		return 0;
	}

	altera_avalon_uart_state* sp_UART_0;
	sp_UART_0->base = UART_0_BASE;


	char rx_buffer[8] = "";
	int mem_count = 0;
	int data_0 = 0;
	int data_1 = 0;
	int data_2 = 0;
	int i = 0;
	int number = 0;
	int number_rec = 0;
	int number_old = 0;
	int temp = 0;
	int bit_cnt = 0;

//Putting defualt filter values
	IOWR_8DIRECT(0x10011000, 3, -1);
	IOWR_8DIRECT(0x10011000, 3, -1);
	IOWR_8DIRECT(0x10011000, 3, -1);
	IOWR_8DIRECT(0x10011000, 3, -1);
	IOWR_8DIRECT(0x10011000, 3, 8);
	IOWR_8DIRECT(0x10011000, 3, -1);
	IOWR_8DIRECT(0x10011000, 3, -1);
	IOWR_8DIRECT(0x10011000, 3, -1);
	IOWR_8DIRECT(0x10011000, 3, -1);





	printf("Hello from Emils Kursa Darbs!\n");
	printf("Switch 1 : Send picture to fpga\n");
	printf("Switch 2 : Send filter to fpga\n");
	printf("Switch 3 : Send 0 to 7 picture to screen\n");
	printf("Switch 4 : Send 8 to 15 picture to screen\n");
	printf("Switch 5 : Send 16 to 23 picture to screen\n");
	printf("Switch 6 : Clear screen\n");
	printf("Switch 7 : Send original picture to screen\n");
	usleep(100000);
	while(1)
	{

		number_rec = IORD_ALTERA_AVALON_PIO_DATA(SW_PIO_BASE);
		IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, number_rec);
		if (number_rec == number_old)
		{
			number = 0;
		} else {
			number = number_rec;
		}
		number_old = number_rec;
		if(isKthBitSet(number,1))
		{
			mem_count = 0;
			printf("Puting zeros at the start of memory\n");
			for(i = 0;i < 1280;i++)
			{
				pBuf[mem_count] = 0;
				mem_count = mem_count+1;
			}


			printf("Waiting for UART data\n");
			for(i = 0;i < 307200;i++)
			{

				altera_avalon_uart_read(sp_UART_0, rx_buffer, sizeof(rx_buffer),0);

				pBuf[mem_count] = (int)rx_buffer[0] - 48;
				mem_count = mem_count+1;

			}

			printf("Done reciving Uart data\n");
			printf("Puting zeros at the end of memory\n");
			for(i = 0;i < 1280;i++)
			{
				pBuf[mem_count] = 0;
				mem_count = mem_count+1;
			}
		}
		if(isKthBitSet(number,2))
		{
		printf("Test\n");
		IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
		usleep(100000);
		IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

		IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);
		uint32_t temp_1 = 0, temp_2 = 0, Result = 0, self = 0;
		uint32_t reg_1 = 0, reg_2 = 0, reg_3 = 0, reg_4 = 0, reg_5 = 0, reg_6 = 0, reg_7 = 0, reg_8 = 0, reg_9 = 0;
		int count = 0;
		for(i = 0;i < 307200;i++)
		{
			IOWR_8DIRECT(0x10011000, 0, pBuf[i]);
			IOWR_8DIRECT(0x10011000, 1, pBuf[i+640]);
			IOWR_8DIRECT(0x10011000, 2, pBuf[i+1280]);
			reg_3 = reg_2;
			reg_2 = reg_1;
			reg_1 = pBuf[i];
			reg_6 = reg_5;
			reg_5 = reg_4;
			reg_4 = pBuf[i+640];
			reg_9 = reg_8;
			reg_8 = reg_7;
			reg_7 = pBuf[i+1280];



			data_0 = IORD_8DIRECT(0x10011000,4);
			data_1 = IORD_8DIRECT(0x10011000,5);
			data_2 = IORD_8DIRECT(0x10011000,6);
			if (count == 1000)
				{
			temp_1 = (isKthBitSet(data_1,1)* pow(2,8)) + (isKthBitSet(data_1,2)*pow(2,9)) + (isKthBitSet(data_1,3)*pow(2,10)) + (isKthBitSet(data_1,4)*pow(2,11)) + (isKthBitSet(data_1,5)*pow(2,12)) + (isKthBitSet(data_1,6)*pow(2,13)) + (isKthBitSet(data_1,7)*pow(2,14)) + (isKthBitSet(data_1,8)*pow(2,15));
			temp_2 = (isKthBitSet(data_2,1)*pow(2,16)) + (isKthBitSet(data_2,2)*pow(2,17)) + (isKthBitSet(data_2,3)*pow(2,18)) + (isKthBitSet(data_2,4)*pow(2,19)) + (isKthBitSet(data_2,5)*pow(2,20)) + (isKthBitSet(data_2,6)*pow(2,21)) + (isKthBitSet(data_2,7)*pow(2,22)) + (isKthBitSet(data_2,8)*pow(2,23));
			Result = data_0 + temp_1 + temp_2;

			self = reg_1 * (-1) + reg_2 * (-1) +reg_3 * (-1) +reg_4 * (-1) + reg_5 * (8) + reg_6 * (-1) + reg_7 * (-1) +reg_8 * (-1) +reg_9 * (-1);

				printf("IP core %d : Self calcuclated : %d\n", Result, self);
				count = 0;
			}
			count = count +1;

			bit_cnt = Log2(Result) + 1;

			Result = (Result / pow(2,bit_cnt))*255;
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
			IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, Result);
			usleep(1);
			IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

		}
		IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
		printf("Done sending picture\n");
	}
		/*if(isKthBitSet(number,2))
		{
			printf("New Filter start\n");
			printf("Waiting for 9 values from uart\n");
			for(i = 0;i < 10;i++)
			{

				altera_avalon_uart_read(sp_UART_0, rx_buffer, sizeof(rx_buffer),0);

				temp  = (int)rx_buffer[0] - 48;
				IOWR_8DIRECT(0x10011000, 3, temp);
			}
			printf("Recived 9 values\n");
			printf("New filter end\n");
		}

		if(isKthBitSet(number,3))
		{
			printf("Sending 0 to 7 picture to screen\n");
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
			{
				IOWR_8DIRECT(0x10011000, 0, pBuf[i]);
				IOWR_8DIRECT(0x10011000, 1, pBuf[i+640]);
				IOWR_8DIRECT(0x10011000, 2, pBuf[i+1280]);
				data_2 = IORD_8DIRECT(0x10011000,4);


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_2);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
			printf("Done sending picture\n");
		}

		if(isKthBitSet(number,4))
		{
			printf("Sending 8 to 15 picture to screen\n");
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
			{
				IOWR_8DIRECT(0x10011000, 0, pBuf[i]);
				IOWR_8DIRECT(0x10011000, 1, pBuf[i+640]);
				IOWR_8DIRECT(0x10011000, 2, pBuf[i+1280]);
				data_1 = IORD_8DIRECT(0x10011000,5);


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_1);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
			printf("Done sending picture\n");
		}
		if(isKthBitSet(number,5))
				{
					printf("Sending 16 to 23 picture to screen\n");
					IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
					usleep(100000);
					IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

					IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

					for(i = 0;i < 307200;i++)
					{
						IOWR_8DIRECT(0x10011000, 0, pBuf[i]);
						IOWR_8DIRECT(0x10011000, 1, pBuf[i+640]);
						IOWR_8DIRECT(0x10011000, 2, pBuf[i+1280]);
						data_2 = IORD_8DIRECT(0x10011000,6);


						IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
						IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_2);
						usleep(1);
						IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

					}
					IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
					printf("Done sending picture\n");
				}
*/
		if(isKthBitSet(number,6))
		{
			printf("clearing display\n");
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
			{


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, 0);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
			printf("Done clearing display\n");
		}
		if(isKthBitSet(number,7))
		{
			printf("Original Picture\n");
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
			{


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, pBuf[i+1280]);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
			printf("Done sending original picture\n");
		}


	}


  return 0;
}
