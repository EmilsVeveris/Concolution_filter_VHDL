
Test_39.elf:     file format elf32-littlenios2
Test_39.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10008244

Program Header:
    LOAD off    0x00001000 vaddr 0x10008000 paddr 0x10008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10008020 paddr 0x10008020 align 2**12
         filesz 0x000030d0 memsz 0x000030d0 flags r-x
    LOAD off    0x00005000 vaddr 0x00000000 paddr 0x1000b0f0 align 2**12
         filesz 0x00000638 memsz 0x00000760 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10008000  10008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10008020  10008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002eac  10008244  10008244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000328  00000000  1000b0f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000310  00000328  1000b418  00005328  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00000638  1000b728  00005638  2**2
                  ALLOC, SMALL_DATA
  6 .mem_if_lpddr2_emif_0 00000000  00000760  00000760  00005638  2**0
                  CONTENTS
  7 .onchip_mem   00000000  1000b728  1000b728  00005638  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005638  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000748  00000000  00000000  00005660  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000975b  00000000  00000000  00005da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000365a  00000000  00000000  0000f503  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003b13  00000000  00000000  00012b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000db8  00000000  00000000  00016670  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f0c  00000000  00000000  00017428  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000ebc  00000000  00000000  00019334  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  0001a1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000260  00000000  00000000  0001a240  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001c326  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0001c329  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001c32c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001c32d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001c32e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001c332  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001c336  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0001c33a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0001c343  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0001c34c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0001c355  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000050  00000000  00000000  0001c364  2**0
                  CONTENTS, READONLY
 30 .jdi          000086e6  00000000  00000000  0001c3b4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000ee821  00000000  00000000  00024a9a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10008000 l    d  .entry	00000000 .entry
10008020 l    d  .exceptions	00000000 .exceptions
10008244 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000328 l    d  .rwdata	00000000 .rwdata
00000638 l    d  .bss	00000000 .bss
00000760 l    d  .mem_if_lpddr2_emif_0	00000000 .mem_if_lpddr2_emif_0
1000b728 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Test_39_bsp//obj/HAL/src/crt0.o
1000827c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000328 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_load.c
1000911c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00000610 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10009364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10009498 l     F .text	00000034 alt_dev_reg
00000408 l     O .rwdata	0000002c jtag_uart
00000434 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
100097a0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
10009954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
10009a54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
10009cc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10009df4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10009e20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000a294 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000a3d4 l     F .text	0000003c alt_get_errno
1000a410 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000065c g     O .bss	00000004 alt_instruction_exception_handler
10009208 g     F .text	0000007c alt_main
10008f0c g     F .text	00000080 _puts_r
00000660 g     O .bss	00000100 alt_irq
1000b418 g       *ABS*	00000000 __flash_rwdata_start
00000760 g       *ABS*	00000000 __alt_heap_start
1000a830 g     F .text	00000024 altera_nios2_gen2_irq_init
10008000 g     F .entry	0000001c __reset
10008020 g       *ABS*	00000000 __flash_exceptions_start
00000640 g     O .bss	00000004 errno
00000648 g     O .bss	00000004 alt_argv
00008608 g       *ABS*	00000000 _gp
10009334 g     F .text	00000030 usleep
00000488 g     O .rwdata	00000180 alt_fd_list
1000a854 g     F .text	00000090 alt_find_dev
1000a358 g     F .text	0000007c alt_io_redirect
1000b0f0 g       *ABS*	00000000 __DTOR_END__
10008f8c g     F .text	00000014 puts
1000ab20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000000 g       *ABS*	00000000 __alt_mem_mem_if_lpddr2_emif_0
10009620 g     F .text	000000ec altera_avalon_jtag_uart_read
10008ca8 g     F .text	00000014 malloc
1000b000 g     F .text	00000064 .hidden __udivsi3
1000aa90 g     F .text	00000090 alt_icache_flush
10008fa0 g     F .text	00000050 _sbrk_r
00000624 g     O .rwdata	00000004 alt_max_fd
00000608 g     O .rwdata	00000004 _global_impure_ptr
00000760 g       *ABS*	00000000 __bss_end
1000a1a4 g     F .text	000000f0 alt_iic_isr_register
1000a728 g     F .text	00000108 alt_tick
1000a158 g     F .text	0000004c alt_ic_irq_enabled
1000a68c g     F .text	0000009c alt_alarm_stop
00000650 g     O .bss	00000004 alt_irq_active
10008000 g       *ABS*	00000000 __alt_mem_onchip_mem
100080fc g     F .exceptions	000000d4 alt_irq_handler
00000460 g     O .rwdata	00000028 alt_dev_null
10009dd4 g     F .text	00000020 alt_dcache_flush_all
00000638 g       *ABS*	00000000 __ram_rwdata_end
0000061c g     O .rwdata	00000008 alt_dev_list
100093a0 g     F .text	000000f8 write
00000328 g       *ABS*	00000000 __ram_rodata_end
1000b064 g     F .text	00000058 .hidden __umodsi3
00000760 g       *ABS*	00000000 end
10009a90 g     F .text	000000e0 altera_avalon_uart_write
100081d0 g     F .exceptions	00000074 alt_instruction_exception_entry
1000b0f0 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
10009818 g     F .text	0000007c alt_avalon_timer_sc_init
100098f4 g     F .text	00000060 altera_avalon_uart_write_fd
1000970c g     F .text	00000094 altera_avalon_jtag_uart_write
10008cd0 g     F .text	000000e4 _free_r
1000ad78 g     F .text	00000190 __call_exitprocs
10008244 g     F .text	0000003c _start
00000654 g     O .bss	00000004 _alt_tick_rate
00000658 g     O .bss	00000004 _alt_nticks
10009504 g     F .text	0000005c alt_sys_init
1000ac20 g     F .text	00000158 __register_exitproc
00000328 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
10009560 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000a9ec g     F .text	000000a4 alt_get_fd
10009b70 g     F .text	00000158 alt_busy_sleep
1000abf0 g     F .text	00000030 memcmp
00000760 g       *ABS*	00000000 __alt_stack_base
1000a8e4 g     F .text	00000108 alt_find_file
10009e5c g     F .text	000000a4 alt_dev_llist_insert
10009284 g     F .text	000000b0 sbrk
1000900c g     F .text	000000b8 __sfvwrite_small_dev
00000638 g       *ABS*	00000000 __bss_start
100082c8 g     F .text	000009e0 main
0000064c g     O .bss	00000004 alt_envp
100095c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10000000 g       *ABS*	00000000 __alt_heap_limit
10008db4 g     F .text	00000158 _malloc_r
10008280 g     F .text	00000048 isKthBitSet
00000628 g     O .rwdata	00000004 alt_errno
1000af08 g     F .text	00000084 .hidden __divsi3
1000b0f0 g       *ABS*	00000000 __CTOR_END__
1000b0f0 g       *ABS*	00000000 __flash_rodata_start
1000b0f0 g       *ABS*	00000000 __DTOR_LIST__
100094cc g     F .text	00000038 alt_irq_init
1000a628 g     F .text	00000064 alt_release_fd
1000abbc g     F .text	00000014 atexit
100090c4 g     F .text	00000058 _write_r
0000060c g     O .rwdata	00000004 _impure_ptr
00000644 g     O .bss	00000004 alt_argc
10009f60 g     F .text	00000060 _do_dtors
10008020 g       .exceptions	00000000 alt_irq_entry
00000614 g     O .rwdata	00000008 alt_fs_list
10008020 g       *ABS*	00000000 __ram_exceptions_start
10009ff4 g     F .text	00000050 alt_ic_isr_register
00000638 g       *ABS*	00000000 _edata
10009894 g     F .text	00000060 altera_avalon_uart_read_fd
00000760 g       *ABS*	00000000 _end
10008244 g       *ABS*	00000000 __ram_exceptions_end
1000a0cc g     F .text	0000008c alt_ic_irq_disable
1000abd0 g     F .text	00000020 exit
1000af8c g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
10008020 g     F .exceptions	00000000 alt_exception
1000b0bc g     F .text	00000034 _exit
10008ff0 g     F .text	0000001c strlen
1000a4d4 g     F .text	00000154 open
00000638 g     O .bss	00000004 __malloc_sbrk_start
10009fc0 g     F .text	00000034 alt_icache_flush_all
0000062c g     O .rwdata	00000004 alt_priority_mask
0000063c g     O .bss	00000004 __malloc_free_list
1000a044 g     F .text	00000088 alt_ic_irq_enable
10009990 g     F .text	000000c4 altera_avalon_uart_read
00000630 g     O .rwdata	00000008 alt_alarm_list
10009f00 g     F .text	00000060 _do_ctors
10009d04 g     F .text	000000d0 close
10009184 g     F .text	00000084 alt_load
10008cbc g     F .text	00000014 free



Disassembly of section .entry:

10008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10008000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
10008004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10008008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000800c:	00bffd16 	blt	zero,r2,10008004 <__flash_rwdata_start+0xffffcbec>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10008010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10008014:	08609114 	ori	at,at,33348
    jmp r1
10008018:	0800683a 	jmp	at
1000801c:	00000000 	call	10000000 <__alt_data_end>

Disassembly of section .exceptions:

10008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10008020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10008024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10008028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10008030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10008034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10008038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10008040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10008044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10008048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10008050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10008054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10008058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10008060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10008064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10008068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10008070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10008074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10008078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000807c:	10000326 	beq	r2,zero,1000808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10008080:	20000226 	beq	r4,zero,1000808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10008084:	00080fc0 	call	100080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10008088:	00000706 	br	100080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10008090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10008094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10008098:	00081d00 	call	100081d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000809c:	1000021e 	bne	r2,zero,100080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100080f8:	ef80083a 	eret

100080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100080fc:	defff904 	addi	sp,sp,-28
10008100:	dfc00615 	stw	ra,24(sp)
10008104:	df000515 	stw	fp,20(sp)
10008108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10008110:	0005313a 	rdctl	r2,ipending
10008114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10008118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10008120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10008124:	00800044 	movi	r2,1
10008128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000812c:	e0fffb17 	ldw	r3,-20(fp)
10008130:	e0bffc17 	ldw	r2,-16(fp)
10008134:	1884703a 	and	r2,r3,r2
10008138:	10001426 	beq	r2,zero,1000818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000813c:	00800034 	movhi	r2,0
10008140:	10819804 	addi	r2,r2,1632
10008144:	e0fffd17 	ldw	r3,-12(fp)
10008148:	180690fa 	slli	r3,r3,3
1000814c:	10c5883a 	add	r2,r2,r3
10008150:	10c00017 	ldw	r3,0(r2)
10008154:	00800034 	movhi	r2,0
10008158:	10819804 	addi	r2,r2,1632
1000815c:	e13ffd17 	ldw	r4,-12(fp)
10008160:	200890fa 	slli	r4,r4,3
10008164:	1105883a 	add	r2,r2,r4
10008168:	10800104 	addi	r2,r2,4
1000816c:	10800017 	ldw	r2,0(r2)
10008170:	1009883a 	mov	r4,r2
10008174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10008178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000817c:	0005313a 	rdctl	r2,ipending
10008180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10008184:	e0bfff17 	ldw	r2,-4(fp)
10008188:	00000706 	br	100081a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000818c:	e0bffc17 	ldw	r2,-16(fp)
10008190:	1085883a 	add	r2,r2,r2
10008194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10008198:	e0bffd17 	ldw	r2,-12(fp)
1000819c:	10800044 	addi	r2,r2,1
100081a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100081a4:	003fe106 	br	1000812c <__flash_rwdata_start+0xffffcd14>

    active = alt_irq_pending ();
100081a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100081ac:	e0bffb17 	ldw	r2,-20(fp)
100081b0:	103fdb1e 	bne	r2,zero,10008120 <__flash_rwdata_start+0xffffcd08>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100081b4:	0001883a 	nop
}
100081b8:	0001883a 	nop
100081bc:	e037883a 	mov	sp,fp
100081c0:	dfc00117 	ldw	ra,4(sp)
100081c4:	df000017 	ldw	fp,0(sp)
100081c8:	dec00204 	addi	sp,sp,8
100081cc:	f800283a 	ret

100081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100081d0:	defffb04 	addi	sp,sp,-20
100081d4:	dfc00415 	stw	ra,16(sp)
100081d8:	df000315 	stw	fp,12(sp)
100081dc:	df000304 	addi	fp,sp,12
100081e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100081e4:	000531fa 	rdctl	r2,exception
100081e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100081ec:	e0bffd17 	ldw	r2,-12(fp)
100081f0:	10801f0c 	andi	r2,r2,124
100081f4:	1004d0ba 	srli	r2,r2,2
100081f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100081fc:	0005333a 	rdctl	r2,badaddr
10008200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10008204:	d0a01517 	ldw	r2,-32684(gp)
10008208:	10000726 	beq	r2,zero,10008228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1000820c:	d0a01517 	ldw	r2,-32684(gp)
10008210:	e0fffd17 	ldw	r3,-12(fp)
10008214:	e1bffe17 	ldw	r6,-8(fp)
10008218:	e17fff17 	ldw	r5,-4(fp)
1000821c:	1809883a 	mov	r4,r3
10008220:	103ee83a 	callr	r2
10008224:	00000206 	br	10008230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10008228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1000822c:	0005883a 	mov	r2,zero
}
10008230:	e037883a 	mov	sp,fp
10008234:	dfc00117 	ldw	ra,4(sp)
10008238:	df000017 	ldw	fp,0(sp)
1000823c:	dec00204 	addi	sp,sp,8
10008240:	f800283a 	ret

Disassembly of section .text:

10008244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10008244:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
10008248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1000824c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
10008250:	d6a18214 	ori	gp,gp,34312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10008254:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
10008258:	10818e14 	ori	r2,r2,1592

    movhi r3, %hi(__bss_end)
1000825c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
10008260:	18c1d814 	ori	r3,r3,1888

    beq r2, r3, 1f
10008264:	10c00326 	beq	r2,r3,10008274 <_start+0x30>

0:
    stw zero, (r2)
10008268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1000826c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10008270:	10fffd36 	bltu	r2,r3,10008268 <__flash_rwdata_start+0xffffce50>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10008274:	00091840 	call	10009184 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10008278:	00092080 	call	10009208 <alt_main>

1000827c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1000827c:	003fff06 	br	1000827c <__flash_rwdata_start+0xffffce64>

10008280 <isKthBitSet>:
# include "alt_types.h"
# include "altera_avalon_uart.h"
# include <string.h>

int isKthBitSet(int n, int k)
{
10008280:	defffd04 	addi	sp,sp,-12
10008284:	df000215 	stw	fp,8(sp)
10008288:	df000204 	addi	fp,sp,8
1000828c:	e13ffe15 	stw	r4,-8(fp)
10008290:	e17fff15 	stw	r5,-4(fp)
    if (n & (1 << (k - 1)))
10008294:	e0bfff17 	ldw	r2,-4(fp)
10008298:	10bfffc4 	addi	r2,r2,-1
1000829c:	e0fffe17 	ldw	r3,-8(fp)
100082a0:	1885d83a 	sra	r2,r3,r2
100082a4:	1080004c 	andi	r2,r2,1
100082a8:	10000226 	beq	r2,zero,100082b4 <isKthBitSet+0x34>
        return 1;
100082ac:	00800044 	movi	r2,1
100082b0:	00000106 	br	100082b8 <isKthBitSet+0x38>
    else
        return 0;
100082b4:	0005883a 	mov	r2,zero
}
100082b8:	e037883a 	mov	sp,fp
100082bc:	df000017 	ldw	fp,0(sp)
100082c0:	dec00104 	addi	sp,sp,4
100082c4:	f800283a 	ret

100082c8 <main>:

int main()
{
100082c8:	defff104 	addi	sp,sp,-60
100082cc:	dfc00e15 	stw	ra,56(sp)
100082d0:	df000d15 	stw	fp,52(sp)
100082d4:	df000d04 	addi	fp,sp,52

	alt_u32 *pBuf;
	alt_u32 lenght = 60000000;
100082d8:	0080e534 	movhi	r2,916
100082dc:	10a1c004 	addi	r2,r2,-30976
100082e0:	e0bff715 	stw	r2,-36(fp)
	pBuf = (alt_u32 *)MEM_IF_LPDDR2_EMIF_0_BASE;
100082e4:	e03ff815 	stw	zero,-32(fp)
	pBuf = malloc(lenght * sizeof(alt_u32));
100082e8:	e0bff717 	ldw	r2,-36(fp)
100082ec:	1085883a 	add	r2,r2,r2
100082f0:	1085883a 	add	r2,r2,r2
100082f4:	1009883a 	mov	r4,r2
100082f8:	0008ca80 	call	10008ca8 <malloc>
100082fc:	e0bff815 	stw	r2,-32(fp)
	if(!pBuf)
10008300:	e0bff817 	ldw	r2,-32(fp)
10008304:	1000051e 	bne	r2,zero,1000831c <main+0x54>
	{
		printf("Malloc fail\r\n");
10008308:	01000034 	movhi	r4,0
1000830c:	21000004 	addi	r4,r4,0
10008310:	0008f8c0 	call	10008f8c <puts>
		return 0;
10008314:	0005883a 	mov	r2,zero
10008318:	00025e06 	br	10008c94 <main+0x9cc>
	}

	altera_avalon_uart_state* sp_UART_0;
	sp_UART_0->base = UART_0_BASE;
1000831c:	e0fff917 	ldw	r3,-28(fp)
10008320:	00840074 	movhi	r2,4097
10008324:	10844004 	addi	r2,r2,4352
10008328:	18800015 	stw	r2,0(r3)


	char rx_buffer[8] = "";
1000832c:	e03ffe15 	stw	zero,-8(fp)
10008330:	e03fff15 	stw	zero,-4(fp)
	int mem_count = 0;
10008334:	e03ff315 	stw	zero,-52(fp)
	int data_1 = 0;
10008338:	e03ffa15 	stw	zero,-24(fp)
	int data_2 = 0;
1000833c:	e03ffb15 	stw	zero,-20(fp)
	int i = 0;
10008340:	e03ff415 	stw	zero,-48(fp)
	int number = 0;
10008344:	e03ff515 	stw	zero,-44(fp)
	int number_rec = 0;
10008348:	e03ffc15 	stw	zero,-16(fp)
	int number_old = 0;
1000834c:	e03ff615 	stw	zero,-40(fp)
	int temp = 0;
10008350:	e03ffd15 	stw	zero,-12(fp)

//Putting defualt filter values
	IOWR_8DIRECT(0x10011000, 3, -1);
10008354:	00ffffc4 	movi	r3,-1
10008358:	00840074 	movhi	r2,4097
1000835c:	108400c4 	addi	r2,r2,4099
10008360:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, -1);
10008364:	00ffffc4 	movi	r3,-1
10008368:	00840074 	movhi	r2,4097
1000836c:	108400c4 	addi	r2,r2,4099
10008370:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, -1);
10008374:	00ffffc4 	movi	r3,-1
10008378:	00840074 	movhi	r2,4097
1000837c:	108400c4 	addi	r2,r2,4099
10008380:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, -1);
10008384:	00ffffc4 	movi	r3,-1
10008388:	00840074 	movhi	r2,4097
1000838c:	108400c4 	addi	r2,r2,4099
10008390:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, 8);
10008394:	00c00204 	movi	r3,8
10008398:	00840074 	movhi	r2,4097
1000839c:	108400c4 	addi	r2,r2,4099
100083a0:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, -1);
100083a4:	00ffffc4 	movi	r3,-1
100083a8:	00840074 	movhi	r2,4097
100083ac:	108400c4 	addi	r2,r2,4099
100083b0:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, -1);
100083b4:	00ffffc4 	movi	r3,-1
100083b8:	00840074 	movhi	r2,4097
100083bc:	108400c4 	addi	r2,r2,4099
100083c0:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, -1);
100083c4:	00ffffc4 	movi	r3,-1
100083c8:	00840074 	movhi	r2,4097
100083cc:	108400c4 	addi	r2,r2,4099
100083d0:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(0x10011000, 3, -1);
100083d4:	00ffffc4 	movi	r3,-1
100083d8:	00840074 	movhi	r2,4097
100083dc:	108400c4 	addi	r2,r2,4099
100083e0:	10c00025 	stbio	r3,0(r2)





	printf("Hello from Emils Kursa Darbs!\n");
100083e4:	01000034 	movhi	r4,0
100083e8:	21000404 	addi	r4,r4,16
100083ec:	0008f8c0 	call	10008f8c <puts>
	printf("Switch 1 : Send picture to fpga\n");
100083f0:	01000034 	movhi	r4,0
100083f4:	21000c04 	addi	r4,r4,48
100083f8:	0008f8c0 	call	10008f8c <puts>
	printf("Switch 2 : Send filter to fpga\n");
100083fc:	01000034 	movhi	r4,0
10008400:	21001404 	addi	r4,r4,80
10008404:	0008f8c0 	call	10008f8c <puts>
	printf("Switch 3 : Send 0 to 7 picture to screen\n");
10008408:	01000034 	movhi	r4,0
1000840c:	21001c04 	addi	r4,r4,112
10008410:	0008f8c0 	call	10008f8c <puts>
	printf("Switch 4 : Send 8 to 15 picture to screen\n");
10008414:	01000034 	movhi	r4,0
10008418:	21002704 	addi	r4,r4,156
1000841c:	0008f8c0 	call	10008f8c <puts>
	printf("Switch 5 : Send 16 to 23 picture to screen\n");
10008420:	01000034 	movhi	r4,0
10008424:	21003204 	addi	r4,r4,200
10008428:	0008f8c0 	call	10008f8c <puts>
	printf("Switch 6 : Clear screen\n");
1000842c:	01000034 	movhi	r4,0
10008430:	21003d04 	addi	r4,r4,244
10008434:	0008f8c0 	call	10008f8c <puts>
	printf("Switch 7 : Send original picture to screen\n");
10008438:	01000034 	movhi	r4,0
1000843c:	21004304 	addi	r4,r4,268
10008440:	0008f8c0 	call	10008f8c <puts>
	usleep(100000);
10008444:	010000b4 	movhi	r4,2
10008448:	2121a804 	addi	r4,r4,-31072
1000844c:	00093340 	call	10009334 <usleep>
	while(1)
	{

		number_rec = IORD_ALTERA_AVALON_PIO_DATA(SW_PIO_BASE);
10008450:	00840074 	movhi	r2,4097
10008454:	10846004 	addi	r2,r2,4480
10008458:	10800037 	ldwio	r2,0(r2)
1000845c:	e0bffc15 	stw	r2,-16(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, number_rec);
10008460:	00840074 	movhi	r2,4097
10008464:	10846404 	addi	r2,r2,4496
10008468:	e0fffc17 	ldw	r3,-16(fp)
1000846c:	10c00035 	stwio	r3,0(r2)
		if (number_rec == number_old)
10008470:	e0fffc17 	ldw	r3,-16(fp)
10008474:	e0bff617 	ldw	r2,-40(fp)
10008478:	1880021e 	bne	r3,r2,10008484 <main+0x1bc>
		{
			number = 0;
1000847c:	e03ff515 	stw	zero,-44(fp)
10008480:	00000206 	br	1000848c <main+0x1c4>
		} else {
			number = number_rec;
10008484:	e0bffc17 	ldw	r2,-16(fp)
10008488:	e0bff515 	stw	r2,-44(fp)
		}
		number_old = number_rec;
1000848c:	e0bffc17 	ldw	r2,-16(fp)
10008490:	e0bff615 	stw	r2,-40(fp)
		if(isKthBitSet(number,1))
10008494:	01400044 	movi	r5,1
10008498:	e13ff517 	ldw	r4,-44(fp)
1000849c:	00082800 	call	10008280 <isKthBitSet>
100084a0:	10004f26 	beq	r2,zero,100085e0 <main+0x318>
		{
			mem_count = 0;
100084a4:	e03ff315 	stw	zero,-52(fp)
			printf("Puting zeros at the start of memory\n");
100084a8:	01000034 	movhi	r4,0
100084ac:	21004e04 	addi	r4,r4,312
100084b0:	0008f8c0 	call	10008f8c <puts>
			for(i = 0;i < 1280;i++)
100084b4:	e03ff415 	stw	zero,-48(fp)
100084b8:	00000d06 	br	100084f0 <main+0x228>
			{
				pBuf[mem_count] = 0;
100084bc:	e0bff317 	ldw	r2,-52(fp)
100084c0:	1085883a 	add	r2,r2,r2
100084c4:	1085883a 	add	r2,r2,r2
100084c8:	1007883a 	mov	r3,r2
100084cc:	e0bff817 	ldw	r2,-32(fp)
100084d0:	10c5883a 	add	r2,r2,r3
100084d4:	10000015 	stw	zero,0(r2)
				mem_count = mem_count+1;
100084d8:	e0bff317 	ldw	r2,-52(fp)
100084dc:	10800044 	addi	r2,r2,1
100084e0:	e0bff315 	stw	r2,-52(fp)
		number_old = number_rec;
		if(isKthBitSet(number,1))
		{
			mem_count = 0;
			printf("Puting zeros at the start of memory\n");
			for(i = 0;i < 1280;i++)
100084e4:	e0bff417 	ldw	r2,-48(fp)
100084e8:	10800044 	addi	r2,r2,1
100084ec:	e0bff415 	stw	r2,-48(fp)
100084f0:	e0bff417 	ldw	r2,-48(fp)
100084f4:	10814010 	cmplti	r2,r2,1280
100084f8:	103ff01e 	bne	r2,zero,100084bc <__flash_rwdata_start+0xffffd0a4>
				pBuf[mem_count] = 0;
				mem_count = mem_count+1;
			}


			printf("Waiting for UART data\n");
100084fc:	01000034 	movhi	r4,0
10008500:	21005704 	addi	r4,r4,348
10008504:	0008f8c0 	call	10008f8c <puts>
			for(i = 0;i < 307200;i++)
10008508:	e03ff415 	stw	zero,-48(fp)
1000850c:	00001806 	br	10008570 <main+0x2a8>
			{

				altera_avalon_uart_read(sp_UART_0, rx_buffer, sizeof(rx_buffer),0);
10008510:	e0bffe04 	addi	r2,fp,-8
10008514:	000f883a 	mov	r7,zero
10008518:	01800204 	movi	r6,8
1000851c:	100b883a 	mov	r5,r2
10008520:	e13ff917 	ldw	r4,-28(fp)
10008524:	00099900 	call	10009990 <altera_avalon_uart_read>

				pBuf[mem_count] = (int)rx_buffer[0] - 48;
10008528:	e0bff317 	ldw	r2,-52(fp)
1000852c:	1085883a 	add	r2,r2,r2
10008530:	1085883a 	add	r2,r2,r2
10008534:	1007883a 	mov	r3,r2
10008538:	e0bff817 	ldw	r2,-32(fp)
1000853c:	10c5883a 	add	r2,r2,r3
10008540:	e0fffe03 	ldbu	r3,-8(fp)
10008544:	18c03fcc 	andi	r3,r3,255
10008548:	18c0201c 	xori	r3,r3,128
1000854c:	18ffe004 	addi	r3,r3,-128
10008550:	18fff404 	addi	r3,r3,-48
10008554:	10c00015 	stw	r3,0(r2)
				mem_count = mem_count+1;
10008558:	e0bff317 	ldw	r2,-52(fp)
1000855c:	10800044 	addi	r2,r2,1
10008560:	e0bff315 	stw	r2,-52(fp)
				mem_count = mem_count+1;
			}


			printf("Waiting for UART data\n");
			for(i = 0;i < 307200;i++)
10008564:	e0bff417 	ldw	r2,-48(fp)
10008568:	10800044 	addi	r2,r2,1
1000856c:	e0bff415 	stw	r2,-48(fp)
10008570:	e0fff417 	ldw	r3,-48(fp)
10008574:	00800174 	movhi	r2,5
10008578:	10abffc4 	addi	r2,r2,-20481
1000857c:	10ffe40e 	bge	r2,r3,10008510 <__flash_rwdata_start+0xffffd0f8>
				pBuf[mem_count] = (int)rx_buffer[0] - 48;
				mem_count = mem_count+1;

			}

			printf("Done reciving Uart data\n");
10008580:	01000034 	movhi	r4,0
10008584:	21005d04 	addi	r4,r4,372
10008588:	0008f8c0 	call	10008f8c <puts>
			printf("Puting zeros at the end of memory\n");
1000858c:	01000034 	movhi	r4,0
10008590:	21006304 	addi	r4,r4,396
10008594:	0008f8c0 	call	10008f8c <puts>
			for(i = 0;i < 1280;i++)
10008598:	e03ff415 	stw	zero,-48(fp)
1000859c:	00000d06 	br	100085d4 <main+0x30c>
			{
				pBuf[mem_count] = 0;
100085a0:	e0bff317 	ldw	r2,-52(fp)
100085a4:	1085883a 	add	r2,r2,r2
100085a8:	1085883a 	add	r2,r2,r2
100085ac:	1007883a 	mov	r3,r2
100085b0:	e0bff817 	ldw	r2,-32(fp)
100085b4:	10c5883a 	add	r2,r2,r3
100085b8:	10000015 	stw	zero,0(r2)
				mem_count = mem_count+1;
100085bc:	e0bff317 	ldw	r2,-52(fp)
100085c0:	10800044 	addi	r2,r2,1
100085c4:	e0bff315 	stw	r2,-52(fp)

			}

			printf("Done reciving Uart data\n");
			printf("Puting zeros at the end of memory\n");
			for(i = 0;i < 1280;i++)
100085c8:	e0bff417 	ldw	r2,-48(fp)
100085cc:	10800044 	addi	r2,r2,1
100085d0:	e0bff415 	stw	r2,-48(fp)
100085d4:	e0bff417 	ldw	r2,-48(fp)
100085d8:	10814010 	cmplti	r2,r2,1280
100085dc:	103ff01e 	bne	r2,zero,100085a0 <__flash_rwdata_start+0xffffd188>
			{
				pBuf[mem_count] = 0;
				mem_count = mem_count+1;
			}
		}
		if(isKthBitSet(number,2))
100085e0:	01400084 	movi	r5,2
100085e4:	e13ff517 	ldw	r4,-44(fp)
100085e8:	00082800 	call	10008280 <isKthBitSet>
100085ec:	10002426 	beq	r2,zero,10008680 <main+0x3b8>
		{
			printf("New Filter start\n");
100085f0:	01000034 	movhi	r4,0
100085f4:	21006c04 	addi	r4,r4,432
100085f8:	0008f8c0 	call	10008f8c <puts>
			printf("Waiting for 9 values from uart\n");
100085fc:	01000034 	movhi	r4,0
10008600:	21007104 	addi	r4,r4,452
10008604:	0008f8c0 	call	10008f8c <puts>
			for(i = 0;i < 10;i++)
10008608:	e03ff415 	stw	zero,-48(fp)
1000860c:	00001306 	br	1000865c <main+0x394>
			{

				altera_avalon_uart_read(sp_UART_0, rx_buffer, sizeof(rx_buffer),0);
10008610:	e0bffe04 	addi	r2,fp,-8
10008614:	000f883a 	mov	r7,zero
10008618:	01800204 	movi	r6,8
1000861c:	100b883a 	mov	r5,r2
10008620:	e13ff917 	ldw	r4,-28(fp)
10008624:	00099900 	call	10009990 <altera_avalon_uart_read>

				temp  = (int)rx_buffer[0] - 48;
10008628:	e0bffe03 	ldbu	r2,-8(fp)
1000862c:	10803fcc 	andi	r2,r2,255
10008630:	1080201c 	xori	r2,r2,128
10008634:	10bfe004 	addi	r2,r2,-128
10008638:	10bff404 	addi	r2,r2,-48
1000863c:	e0bffd15 	stw	r2,-12(fp)
				IOWR_8DIRECT(0x10011000, 3, temp);
10008640:	00840074 	movhi	r2,4097
10008644:	108400c4 	addi	r2,r2,4099
10008648:	e0fffd03 	ldbu	r3,-12(fp)
1000864c:	10c00025 	stbio	r3,0(r2)
		}
		if(isKthBitSet(number,2))
		{
			printf("New Filter start\n");
			printf("Waiting for 9 values from uart\n");
			for(i = 0;i < 10;i++)
10008650:	e0bff417 	ldw	r2,-48(fp)
10008654:	10800044 	addi	r2,r2,1
10008658:	e0bff415 	stw	r2,-48(fp)
1000865c:	e0bff417 	ldw	r2,-48(fp)
10008660:	10800290 	cmplti	r2,r2,10
10008664:	103fea1e 	bne	r2,zero,10008610 <__flash_rwdata_start+0xffffd1f8>
				altera_avalon_uart_read(sp_UART_0, rx_buffer, sizeof(rx_buffer),0);

				temp  = (int)rx_buffer[0] - 48;
				IOWR_8DIRECT(0x10011000, 3, temp);
			}
			printf("Recived 9 values\n");
10008668:	01000034 	movhi	r4,0
1000866c:	21007904 	addi	r4,r4,484
10008670:	0008f8c0 	call	10008f8c <puts>
			printf("New filter end\n");
10008674:	01000034 	movhi	r4,0
10008678:	21007e04 	addi	r4,r4,504
1000867c:	0008f8c0 	call	10008f8c <puts>
		}

		if(isKthBitSet(number,3))
10008680:	014000c4 	movi	r5,3
10008684:	e13ff517 	ldw	r4,-44(fp)
10008688:	00082800 	call	10008280 <isKthBitSet>
1000868c:	10005826 	beq	r2,zero,100087f0 <main+0x528>
		{
			printf("Sending 0 to 7 picture to screen\n");
10008690:	01000034 	movhi	r4,0
10008694:	21008204 	addi	r4,r4,520
10008698:	0008f8c0 	call	10008f8c <puts>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
1000869c:	0007883a 	mov	r3,zero
100086a0:	00840074 	movhi	r2,4097
100086a4:	10845004 	addi	r2,r2,4416
100086a8:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
100086ac:	010000b4 	movhi	r4,2
100086b0:	2121a804 	addi	r4,r4,-31072
100086b4:	00093340 	call	10009334 <usleep>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);
100086b8:	00c00044 	movi	r3,1
100086bc:	00840074 	movhi	r2,4097
100086c0:	10845004 	addi	r2,r2,4416
100086c4:	10c00035 	stwio	r3,0(r2)

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);
100086c8:	00c00044 	movi	r3,1
100086cc:	00840074 	movhi	r2,4097
100086d0:	10845404 	addi	r2,r2,4432
100086d4:	10c00035 	stwio	r3,0(r2)

			for(i = 0;i < 307200;i++)
100086d8:	e03ff415 	stw	zero,-48(fp)
100086dc:	00003906 	br	100087c4 <main+0x4fc>
			{
				IOWR_8DIRECT(0x10011000, 0, pBuf[i]);
100086e0:	e0bff417 	ldw	r2,-48(fp)
100086e4:	1085883a 	add	r2,r2,r2
100086e8:	1085883a 	add	r2,r2,r2
100086ec:	1007883a 	mov	r3,r2
100086f0:	e0bff817 	ldw	r2,-32(fp)
100086f4:	10c5883a 	add	r2,r2,r3
100086f8:	10800017 	ldw	r2,0(r2)
100086fc:	1007883a 	mov	r3,r2
10008700:	00840074 	movhi	r2,4097
10008704:	10840004 	addi	r2,r2,4096
10008708:	10c00025 	stbio	r3,0(r2)
				IOWR_8DIRECT(0x10011000, 1, pBuf[i+640]);
1000870c:	e0bff417 	ldw	r2,-48(fp)
10008710:	1080a004 	addi	r2,r2,640
10008714:	1085883a 	add	r2,r2,r2
10008718:	1085883a 	add	r2,r2,r2
1000871c:	1007883a 	mov	r3,r2
10008720:	e0bff817 	ldw	r2,-32(fp)
10008724:	10c5883a 	add	r2,r2,r3
10008728:	10800017 	ldw	r2,0(r2)
1000872c:	1007883a 	mov	r3,r2
10008730:	00840074 	movhi	r2,4097
10008734:	10840044 	addi	r2,r2,4097
10008738:	10c00025 	stbio	r3,0(r2)
				IOWR_8DIRECT(0x10011000, 2, pBuf[i+1280]);
1000873c:	e0bff417 	ldw	r2,-48(fp)
10008740:	10814004 	addi	r2,r2,1280
10008744:	1085883a 	add	r2,r2,r2
10008748:	1085883a 	add	r2,r2,r2
1000874c:	1007883a 	mov	r3,r2
10008750:	e0bff817 	ldw	r2,-32(fp)
10008754:	10c5883a 	add	r2,r2,r3
10008758:	10800017 	ldw	r2,0(r2)
1000875c:	1007883a 	mov	r3,r2
10008760:	00840074 	movhi	r2,4097
10008764:	10840084 	addi	r2,r2,4098
10008768:	10c00025 	stbio	r3,0(r2)
				data_2 = IORD_8DIRECT(0x10011000,4);
1000876c:	00840074 	movhi	r2,4097
10008770:	10840104 	addi	r2,r2,4100
10008774:	10800023 	ldbuio	r2,0(r2)
10008778:	10803fcc 	andi	r2,r2,255
1000877c:	e0bffb15 	stw	r2,-20(fp)


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
10008780:	00c00044 	movi	r3,1
10008784:	00840074 	movhi	r2,4097
10008788:	10845c04 	addi	r2,r2,4464
1000878c:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_2);
10008790:	00840074 	movhi	r2,4097
10008794:	10845804 	addi	r2,r2,4448
10008798:	e0fffb17 	ldw	r3,-20(fp)
1000879c:	10c00035 	stwio	r3,0(r2)
				usleep(1);
100087a0:	01000044 	movi	r4,1
100087a4:	00093340 	call	10009334 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);
100087a8:	0007883a 	mov	r3,zero
100087ac:	00840074 	movhi	r2,4097
100087b0:	10845c04 	addi	r2,r2,4464
100087b4:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
100087b8:	e0bff417 	ldw	r2,-48(fp)
100087bc:	10800044 	addi	r2,r2,1
100087c0:	e0bff415 	stw	r2,-48(fp)
100087c4:	e0fff417 	ldw	r3,-48(fp)
100087c8:	00800174 	movhi	r2,5
100087cc:	10abffc4 	addi	r2,r2,-20481
100087d0:	10ffc30e 	bge	r2,r3,100086e0 <__flash_rwdata_start+0xffffd2c8>
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_2);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
100087d4:	0007883a 	mov	r3,zero
100087d8:	00840074 	movhi	r2,4097
100087dc:	10845404 	addi	r2,r2,4432
100087e0:	10c00035 	stwio	r3,0(r2)
			printf("Done sending picture\n");
100087e4:	01000034 	movhi	r4,0
100087e8:	21008b04 	addi	r4,r4,556
100087ec:	0008f8c0 	call	10008f8c <puts>
		}

		if(isKthBitSet(number,4))
100087f0:	01400104 	movi	r5,4
100087f4:	e13ff517 	ldw	r4,-44(fp)
100087f8:	00082800 	call	10008280 <isKthBitSet>
100087fc:	10005826 	beq	r2,zero,10008960 <main+0x698>
		{
			printf("Sending 8 to 15 picture to screen\n");
10008800:	01000034 	movhi	r4,0
10008804:	21009104 	addi	r4,r4,580
10008808:	0008f8c0 	call	10008f8c <puts>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
1000880c:	0007883a 	mov	r3,zero
10008810:	00840074 	movhi	r2,4097
10008814:	10845004 	addi	r2,r2,4416
10008818:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
1000881c:	010000b4 	movhi	r4,2
10008820:	2121a804 	addi	r4,r4,-31072
10008824:	00093340 	call	10009334 <usleep>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);
10008828:	00c00044 	movi	r3,1
1000882c:	00840074 	movhi	r2,4097
10008830:	10845004 	addi	r2,r2,4416
10008834:	10c00035 	stwio	r3,0(r2)

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);
10008838:	00c00044 	movi	r3,1
1000883c:	00840074 	movhi	r2,4097
10008840:	10845404 	addi	r2,r2,4432
10008844:	10c00035 	stwio	r3,0(r2)

			for(i = 0;i < 307200;i++)
10008848:	e03ff415 	stw	zero,-48(fp)
1000884c:	00003906 	br	10008934 <main+0x66c>
			{
				IOWR_8DIRECT(0x10011000, 0, pBuf[i]);
10008850:	e0bff417 	ldw	r2,-48(fp)
10008854:	1085883a 	add	r2,r2,r2
10008858:	1085883a 	add	r2,r2,r2
1000885c:	1007883a 	mov	r3,r2
10008860:	e0bff817 	ldw	r2,-32(fp)
10008864:	10c5883a 	add	r2,r2,r3
10008868:	10800017 	ldw	r2,0(r2)
1000886c:	1007883a 	mov	r3,r2
10008870:	00840074 	movhi	r2,4097
10008874:	10840004 	addi	r2,r2,4096
10008878:	10c00025 	stbio	r3,0(r2)
				IOWR_8DIRECT(0x10011000, 1, pBuf[i+640]);
1000887c:	e0bff417 	ldw	r2,-48(fp)
10008880:	1080a004 	addi	r2,r2,640
10008884:	1085883a 	add	r2,r2,r2
10008888:	1085883a 	add	r2,r2,r2
1000888c:	1007883a 	mov	r3,r2
10008890:	e0bff817 	ldw	r2,-32(fp)
10008894:	10c5883a 	add	r2,r2,r3
10008898:	10800017 	ldw	r2,0(r2)
1000889c:	1007883a 	mov	r3,r2
100088a0:	00840074 	movhi	r2,4097
100088a4:	10840044 	addi	r2,r2,4097
100088a8:	10c00025 	stbio	r3,0(r2)
				IOWR_8DIRECT(0x10011000, 2, pBuf[i+1280]);
100088ac:	e0bff417 	ldw	r2,-48(fp)
100088b0:	10814004 	addi	r2,r2,1280
100088b4:	1085883a 	add	r2,r2,r2
100088b8:	1085883a 	add	r2,r2,r2
100088bc:	1007883a 	mov	r3,r2
100088c0:	e0bff817 	ldw	r2,-32(fp)
100088c4:	10c5883a 	add	r2,r2,r3
100088c8:	10800017 	ldw	r2,0(r2)
100088cc:	1007883a 	mov	r3,r2
100088d0:	00840074 	movhi	r2,4097
100088d4:	10840084 	addi	r2,r2,4098
100088d8:	10c00025 	stbio	r3,0(r2)
				data_1 = IORD_8DIRECT(0x10011000,5);
100088dc:	00840074 	movhi	r2,4097
100088e0:	10840144 	addi	r2,r2,4101
100088e4:	10800023 	ldbuio	r2,0(r2)
100088e8:	10803fcc 	andi	r2,r2,255
100088ec:	e0bffa15 	stw	r2,-24(fp)


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
100088f0:	00c00044 	movi	r3,1
100088f4:	00840074 	movhi	r2,4097
100088f8:	10845c04 	addi	r2,r2,4464
100088fc:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_1);
10008900:	00840074 	movhi	r2,4097
10008904:	10845804 	addi	r2,r2,4448
10008908:	e0fffa17 	ldw	r3,-24(fp)
1000890c:	10c00035 	stwio	r3,0(r2)
				usleep(1);
10008910:	01000044 	movi	r4,1
10008914:	00093340 	call	10009334 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);
10008918:	0007883a 	mov	r3,zero
1000891c:	00840074 	movhi	r2,4097
10008920:	10845c04 	addi	r2,r2,4464
10008924:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
10008928:	e0bff417 	ldw	r2,-48(fp)
1000892c:	10800044 	addi	r2,r2,1
10008930:	e0bff415 	stw	r2,-48(fp)
10008934:	e0fff417 	ldw	r3,-48(fp)
10008938:	00800174 	movhi	r2,5
1000893c:	10abffc4 	addi	r2,r2,-20481
10008940:	10ffc30e 	bge	r2,r3,10008850 <__flash_rwdata_start+0xffffd438>
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_1);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
10008944:	0007883a 	mov	r3,zero
10008948:	00840074 	movhi	r2,4097
1000894c:	10845404 	addi	r2,r2,4432
10008950:	10c00035 	stwio	r3,0(r2)
			printf("Done sending picture\n");
10008954:	01000034 	movhi	r4,0
10008958:	21008b04 	addi	r4,r4,556
1000895c:	0008f8c0 	call	10008f8c <puts>
		}
		if(isKthBitSet(number,5))
10008960:	01400144 	movi	r5,5
10008964:	e13ff517 	ldw	r4,-44(fp)
10008968:	00082800 	call	10008280 <isKthBitSet>
1000896c:	10005826 	beq	r2,zero,10008ad0 <main+0x808>
				{
					printf("Sending 16 to 23 picture to screen\n");
10008970:	01000034 	movhi	r4,0
10008974:	21009a04 	addi	r4,r4,616
10008978:	0008f8c0 	call	10008f8c <puts>
					IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
1000897c:	0007883a 	mov	r3,zero
10008980:	00840074 	movhi	r2,4097
10008984:	10845004 	addi	r2,r2,4416
10008988:	10c00035 	stwio	r3,0(r2)
					usleep(100000);
1000898c:	010000b4 	movhi	r4,2
10008990:	2121a804 	addi	r4,r4,-31072
10008994:	00093340 	call	10009334 <usleep>
					IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);
10008998:	00c00044 	movi	r3,1
1000899c:	00840074 	movhi	r2,4097
100089a0:	10845004 	addi	r2,r2,4416
100089a4:	10c00035 	stwio	r3,0(r2)

					IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);
100089a8:	00c00044 	movi	r3,1
100089ac:	00840074 	movhi	r2,4097
100089b0:	10845404 	addi	r2,r2,4432
100089b4:	10c00035 	stwio	r3,0(r2)

					for(i = 0;i < 307200;i++)
100089b8:	e03ff415 	stw	zero,-48(fp)
100089bc:	00003906 	br	10008aa4 <main+0x7dc>
					{
						IOWR_8DIRECT(0x10011000, 0, pBuf[i]);
100089c0:	e0bff417 	ldw	r2,-48(fp)
100089c4:	1085883a 	add	r2,r2,r2
100089c8:	1085883a 	add	r2,r2,r2
100089cc:	1007883a 	mov	r3,r2
100089d0:	e0bff817 	ldw	r2,-32(fp)
100089d4:	10c5883a 	add	r2,r2,r3
100089d8:	10800017 	ldw	r2,0(r2)
100089dc:	1007883a 	mov	r3,r2
100089e0:	00840074 	movhi	r2,4097
100089e4:	10840004 	addi	r2,r2,4096
100089e8:	10c00025 	stbio	r3,0(r2)
						IOWR_8DIRECT(0x10011000, 1, pBuf[i+640]);
100089ec:	e0bff417 	ldw	r2,-48(fp)
100089f0:	1080a004 	addi	r2,r2,640
100089f4:	1085883a 	add	r2,r2,r2
100089f8:	1085883a 	add	r2,r2,r2
100089fc:	1007883a 	mov	r3,r2
10008a00:	e0bff817 	ldw	r2,-32(fp)
10008a04:	10c5883a 	add	r2,r2,r3
10008a08:	10800017 	ldw	r2,0(r2)
10008a0c:	1007883a 	mov	r3,r2
10008a10:	00840074 	movhi	r2,4097
10008a14:	10840044 	addi	r2,r2,4097
10008a18:	10c00025 	stbio	r3,0(r2)
						IOWR_8DIRECT(0x10011000, 2, pBuf[i+1280]);
10008a1c:	e0bff417 	ldw	r2,-48(fp)
10008a20:	10814004 	addi	r2,r2,1280
10008a24:	1085883a 	add	r2,r2,r2
10008a28:	1085883a 	add	r2,r2,r2
10008a2c:	1007883a 	mov	r3,r2
10008a30:	e0bff817 	ldw	r2,-32(fp)
10008a34:	10c5883a 	add	r2,r2,r3
10008a38:	10800017 	ldw	r2,0(r2)
10008a3c:	1007883a 	mov	r3,r2
10008a40:	00840074 	movhi	r2,4097
10008a44:	10840084 	addi	r2,r2,4098
10008a48:	10c00025 	stbio	r3,0(r2)
						data_2 = IORD_8DIRECT(0x10011000,6);
10008a4c:	00840074 	movhi	r2,4097
10008a50:	10840184 	addi	r2,r2,4102
10008a54:	10800023 	ldbuio	r2,0(r2)
10008a58:	10803fcc 	andi	r2,r2,255
10008a5c:	e0bffb15 	stw	r2,-20(fp)


						IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
10008a60:	00c00044 	movi	r3,1
10008a64:	00840074 	movhi	r2,4097
10008a68:	10845c04 	addi	r2,r2,4464
10008a6c:	10c00035 	stwio	r3,0(r2)
						IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_2);
10008a70:	00840074 	movhi	r2,4097
10008a74:	10845804 	addi	r2,r2,4448
10008a78:	e0fffb17 	ldw	r3,-20(fp)
10008a7c:	10c00035 	stwio	r3,0(r2)
						usleep(1);
10008a80:	01000044 	movi	r4,1
10008a84:	00093340 	call	10009334 <usleep>
						IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);
10008a88:	0007883a 	mov	r3,zero
10008a8c:	00840074 	movhi	r2,4097
10008a90:	10845c04 	addi	r2,r2,4464
10008a94:	10c00035 	stwio	r3,0(r2)
					usleep(100000);
					IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

					IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

					for(i = 0;i < 307200;i++)
10008a98:	e0bff417 	ldw	r2,-48(fp)
10008a9c:	10800044 	addi	r2,r2,1
10008aa0:	e0bff415 	stw	r2,-48(fp)
10008aa4:	e0fff417 	ldw	r3,-48(fp)
10008aa8:	00800174 	movhi	r2,5
10008aac:	10abffc4 	addi	r2,r2,-20481
10008ab0:	10ffc30e 	bge	r2,r3,100089c0 <__flash_rwdata_start+0xffffd5a8>
						IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data_2);
						usleep(1);
						IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

					}
					IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
10008ab4:	0007883a 	mov	r3,zero
10008ab8:	00840074 	movhi	r2,4097
10008abc:	10845404 	addi	r2,r2,4432
10008ac0:	10c00035 	stwio	r3,0(r2)
					printf("Done sending picture\n");
10008ac4:	01000034 	movhi	r4,0
10008ac8:	21008b04 	addi	r4,r4,556
10008acc:	0008f8c0 	call	10008f8c <puts>
				}

		if(isKthBitSet(number,6))
10008ad0:	01400184 	movi	r5,6
10008ad4:	e13ff517 	ldw	r4,-44(fp)
10008ad8:	00082800 	call	10008280 <isKthBitSet>
10008adc:	10003026 	beq	r2,zero,10008ba0 <main+0x8d8>
		{
			printf("clearing display\n");
10008ae0:	01000034 	movhi	r4,0
10008ae4:	2100a304 	addi	r4,r4,652
10008ae8:	0008f8c0 	call	10008f8c <puts>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
10008aec:	0007883a 	mov	r3,zero
10008af0:	00840074 	movhi	r2,4097
10008af4:	10845004 	addi	r2,r2,4416
10008af8:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
10008afc:	010000b4 	movhi	r4,2
10008b00:	2121a804 	addi	r4,r4,-31072
10008b04:	00093340 	call	10009334 <usleep>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);
10008b08:	00c00044 	movi	r3,1
10008b0c:	00840074 	movhi	r2,4097
10008b10:	10845004 	addi	r2,r2,4416
10008b14:	10c00035 	stwio	r3,0(r2)

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);
10008b18:	00c00044 	movi	r3,1
10008b1c:	00840074 	movhi	r2,4097
10008b20:	10845404 	addi	r2,r2,4432
10008b24:	10c00035 	stwio	r3,0(r2)

			for(i = 0;i < 307200;i++)
10008b28:	e03ff415 	stw	zero,-48(fp)
10008b2c:	00001106 	br	10008b74 <main+0x8ac>
			{


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
10008b30:	00c00044 	movi	r3,1
10008b34:	00840074 	movhi	r2,4097
10008b38:	10845c04 	addi	r2,r2,4464
10008b3c:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, 0);
10008b40:	0007883a 	mov	r3,zero
10008b44:	00840074 	movhi	r2,4097
10008b48:	10845804 	addi	r2,r2,4448
10008b4c:	10c00035 	stwio	r3,0(r2)
				usleep(1);
10008b50:	01000044 	movi	r4,1
10008b54:	00093340 	call	10009334 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);
10008b58:	0007883a 	mov	r3,zero
10008b5c:	00840074 	movhi	r2,4097
10008b60:	10845c04 	addi	r2,r2,4464
10008b64:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
10008b68:	e0bff417 	ldw	r2,-48(fp)
10008b6c:	10800044 	addi	r2,r2,1
10008b70:	e0bff415 	stw	r2,-48(fp)
10008b74:	e0fff417 	ldw	r3,-48(fp)
10008b78:	00800174 	movhi	r2,5
10008b7c:	10abffc4 	addi	r2,r2,-20481
10008b80:	10ffeb0e 	bge	r2,r3,10008b30 <__flash_rwdata_start+0xffffd718>
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, 0);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
10008b84:	0007883a 	mov	r3,zero
10008b88:	00840074 	movhi	r2,4097
10008b8c:	10845404 	addi	r2,r2,4432
10008b90:	10c00035 	stwio	r3,0(r2)
			printf("Done clearing display\n");
10008b94:	01000034 	movhi	r4,0
10008b98:	2100a804 	addi	r4,r4,672
10008b9c:	0008f8c0 	call	10008f8c <puts>
		}
		if(isKthBitSet(number,7))
10008ba0:	014001c4 	movi	r5,7
10008ba4:	e13ff517 	ldw	r4,-44(fp)
10008ba8:	00082800 	call	10008280 <isKthBitSet>
10008bac:	103e2826 	beq	r2,zero,10008450 <__flash_rwdata_start+0xffffd038>
		{
			printf("Original Picture\n");
10008bb0:	01000034 	movhi	r4,0
10008bb4:	2100ae04 	addi	r4,r4,696
10008bb8:	0008f8c0 	call	10008f8c <puts>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,0);
10008bbc:	0007883a 	mov	r3,zero
10008bc0:	00840074 	movhi	r2,4097
10008bc4:	10845004 	addi	r2,r2,4416
10008bc8:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
10008bcc:	010000b4 	movhi	r4,2
10008bd0:	2121a804 	addi	r4,r4,-31072
10008bd4:	00093340 	call	10009334 <usleep>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);
10008bd8:	00c00044 	movi	r3,1
10008bdc:	00840074 	movhi	r2,4097
10008be0:	10845004 	addi	r2,r2,4416
10008be4:	10c00035 	stwio	r3,0(r2)

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);
10008be8:	00c00044 	movi	r3,1
10008bec:	00840074 	movhi	r2,4097
10008bf0:	10845404 	addi	r2,r2,4432
10008bf4:	10c00035 	stwio	r3,0(r2)

			for(i = 0;i < 307200;i++)
10008bf8:	e03ff415 	stw	zero,-48(fp)
10008bfc:	00001906 	br	10008c64 <main+0x99c>
			{


				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 1);
10008c00:	00c00044 	movi	r3,1
10008c04:	00840074 	movhi	r2,4097
10008c08:	10845c04 	addi	r2,r2,4464
10008c0c:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, pBuf[i+1280]);
10008c10:	e0bff417 	ldw	r2,-48(fp)
10008c14:	10814004 	addi	r2,r2,1280
10008c18:	1085883a 	add	r2,r2,r2
10008c1c:	1085883a 	add	r2,r2,r2
10008c20:	1007883a 	mov	r3,r2
10008c24:	e0bff817 	ldw	r2,-32(fp)
10008c28:	10c5883a 	add	r2,r2,r3
10008c2c:	10800017 	ldw	r2,0(r2)
10008c30:	1007883a 	mov	r3,r2
10008c34:	00840074 	movhi	r2,4097
10008c38:	10845804 	addi	r2,r2,4448
10008c3c:	10c00035 	stwio	r3,0(r2)
				usleep(1);
10008c40:	01000044 	movi	r4,1
10008c44:	00093340 	call	10009334 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);
10008c48:	0007883a 	mov	r3,zero
10008c4c:	00840074 	movhi	r2,4097
10008c50:	10845c04 	addi	r2,r2,4464
10008c54:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_CNT_BASE,1);

			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,1);

			for(i = 0;i < 307200;i++)
10008c58:	e0bff417 	ldw	r2,-48(fp)
10008c5c:	10800044 	addi	r2,r2,1
10008c60:	e0bff415 	stw	r2,-48(fp)
10008c64:	e0fff417 	ldw	r3,-48(fp)
10008c68:	00800174 	movhi	r2,5
10008c6c:	10abffc4 	addi	r2,r2,-20481
10008c70:	10ffe30e 	bge	r2,r3,10008c00 <__flash_rwdata_start+0xffffd7e8>
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, pBuf[i+1280]);
				usleep(1);
				IOWR_ALTERA_AVALON_PIO_DATA(WRITE_EN_BASE, 0);

			}
			IOWR_ALTERA_AVALON_PIO_DATA(START_BIT_BASE,0);
10008c74:	0007883a 	mov	r3,zero
10008c78:	00840074 	movhi	r2,4097
10008c7c:	10845404 	addi	r2,r2,4432
10008c80:	10c00035 	stwio	r3,0(r2)
			printf("Done sending original picture\n");
10008c84:	01000034 	movhi	r4,0
10008c88:	2100b304 	addi	r4,r4,716
10008c8c:	0008f8c0 	call	10008f8c <puts>
		}


	}
10008c90:	003def06 	br	10008450 <__flash_rwdata_start+0xffffd038>


  return 0;
}
10008c94:	e037883a 	mov	sp,fp
10008c98:	dfc00117 	ldw	ra,4(sp)
10008c9c:	df000017 	ldw	fp,0(sp)
10008ca0:	dec00204 	addi	sp,sp,8
10008ca4:	f800283a 	ret

10008ca8 <malloc>:
10008ca8:	00800034 	movhi	r2,0
10008cac:	10818304 	addi	r2,r2,1548
10008cb0:	200b883a 	mov	r5,r4
10008cb4:	11000017 	ldw	r4,0(r2)
10008cb8:	0008db41 	jmpi	10008db4 <_malloc_r>

10008cbc <free>:
10008cbc:	00800034 	movhi	r2,0
10008cc0:	10818304 	addi	r2,r2,1548
10008cc4:	200b883a 	mov	r5,r4
10008cc8:	11000017 	ldw	r4,0(r2)
10008ccc:	0008cd01 	jmpi	10008cd0 <_free_r>

10008cd0 <_free_r>:
10008cd0:	28003726 	beq	r5,zero,10008db0 <_free_r+0xe0>
10008cd4:	28ffff17 	ldw	r3,-4(r5)
10008cd8:	28bfff04 	addi	r2,r5,-4
10008cdc:	1800010e 	bge	r3,zero,10008ce4 <_free_r+0x14>
10008ce0:	10c5883a 	add	r2,r2,r3
10008ce4:	01400034 	movhi	r5,0
10008ce8:	29418f04 	addi	r5,r5,1596
10008cec:	28c00017 	ldw	r3,0(r5)
10008cf0:	280d883a 	mov	r6,r5
10008cf4:	1800031e 	bne	r3,zero,10008d04 <_free_r+0x34>
10008cf8:	10000115 	stw	zero,4(r2)
10008cfc:	28800015 	stw	r2,0(r5)
10008d00:	f800283a 	ret
10008d04:	10c00c2e 	bgeu	r2,r3,10008d38 <_free_r+0x68>
10008d08:	11000017 	ldw	r4,0(r2)
10008d0c:	110b883a 	add	r5,r2,r4
10008d10:	1940041e 	bne	r3,r5,10008d24 <_free_r+0x54>
10008d14:	19400017 	ldw	r5,0(r3)
10008d18:	18c00117 	ldw	r3,4(r3)
10008d1c:	2909883a 	add	r4,r5,r4
10008d20:	11000015 	stw	r4,0(r2)
10008d24:	10c00115 	stw	r3,4(r2)
10008d28:	30800015 	stw	r2,0(r6)
10008d2c:	f800283a 	ret
10008d30:	11400336 	bltu	r2,r5,10008d40 <_free_r+0x70>
10008d34:	2807883a 	mov	r3,r5
10008d38:	19400117 	ldw	r5,4(r3)
10008d3c:	283ffc1e 	bne	r5,zero,10008d30 <__flash_rwdata_start+0xffffd918>
10008d40:	19c00017 	ldw	r7,0(r3)
10008d44:	19cd883a 	add	r6,r3,r7
10008d48:	30800a1e 	bne	r6,r2,10008d74 <_free_r+0xa4>
10008d4c:	10800017 	ldw	r2,0(r2)
10008d50:	3885883a 	add	r2,r7,r2
10008d54:	18800015 	stw	r2,0(r3)
10008d58:	1889883a 	add	r4,r3,r2
10008d5c:	2900141e 	bne	r5,r4,10008db0 <_free_r+0xe0>
10008d60:	29000017 	ldw	r4,0(r5)
10008d64:	2085883a 	add	r2,r4,r2
10008d68:	18800015 	stw	r2,0(r3)
10008d6c:	28800117 	ldw	r2,4(r5)
10008d70:	00000e06 	br	10008dac <_free_r+0xdc>
10008d74:	1180032e 	bgeu	r2,r6,10008d84 <_free_r+0xb4>
10008d78:	00800304 	movi	r2,12
10008d7c:	20800015 	stw	r2,0(r4)
10008d80:	f800283a 	ret
10008d84:	11000017 	ldw	r4,0(r2)
10008d88:	110d883a 	add	r6,r2,r4
10008d8c:	2980061e 	bne	r5,r6,10008da8 <_free_r+0xd8>
10008d90:	29800017 	ldw	r6,0(r5)
10008d94:	3109883a 	add	r4,r6,r4
10008d98:	11000015 	stw	r4,0(r2)
10008d9c:	29000117 	ldw	r4,4(r5)
10008da0:	11000115 	stw	r4,4(r2)
10008da4:	00000106 	br	10008dac <_free_r+0xdc>
10008da8:	11400115 	stw	r5,4(r2)
10008dac:	18800115 	stw	r2,4(r3)
10008db0:	f800283a 	ret

10008db4 <_malloc_r>:
10008db4:	defffb04 	addi	sp,sp,-20
10008db8:	00bfff04 	movi	r2,-4
10008dbc:	dc400115 	stw	r17,4(sp)
10008dc0:	2c4000c4 	addi	r17,r5,3
10008dc4:	88a2703a 	and	r17,r17,r2
10008dc8:	dc800215 	stw	r18,8(sp)
10008dcc:	dfc00415 	stw	ra,16(sp)
10008dd0:	dcc00315 	stw	r19,12(sp)
10008dd4:	dc000015 	stw	r16,0(sp)
10008dd8:	8c400204 	addi	r17,r17,8
10008ddc:	00800304 	movi	r2,12
10008de0:	2025883a 	mov	r18,r4
10008de4:	8880022e 	bgeu	r17,r2,10008df0 <_malloc_r+0x3c>
10008de8:	1023883a 	mov	r17,r2
10008dec:	00000506 	br	10008e04 <_malloc_r+0x50>
10008df0:	8800040e 	bge	r17,zero,10008e04 <_malloc_r+0x50>
10008df4:	00800304 	movi	r2,12
10008df8:	90800015 	stw	r2,0(r18)
10008dfc:	0005883a 	mov	r2,zero
10008e00:	00003b06 	br	10008ef0 <_malloc_r+0x13c>
10008e04:	897ffb36 	bltu	r17,r5,10008df4 <__flash_rwdata_start+0xffffd9dc>
10008e08:	00800034 	movhi	r2,0
10008e0c:	10818f04 	addi	r2,r2,1596
10008e10:	10c00017 	ldw	r3,0(r2)
10008e14:	1009883a 	mov	r4,r2
10008e18:	1821883a 	mov	r16,r3
10008e1c:	80000926 	beq	r16,zero,10008e44 <_malloc_r+0x90>
10008e20:	80800017 	ldw	r2,0(r16)
10008e24:	1445c83a 	sub	r2,r2,r17
10008e28:	10001516 	blt	r2,zero,10008e80 <_malloc_r+0xcc>
10008e2c:	014002c4 	movi	r5,11
10008e30:	28800d2e 	bgeu	r5,r2,10008e68 <_malloc_r+0xb4>
10008e34:	80800015 	stw	r2,0(r16)
10008e38:	80a1883a 	add	r16,r16,r2
10008e3c:	84400015 	stw	r17,0(r16)
10008e40:	8000221e 	bne	r16,zero,10008ecc <_malloc_r+0x118>
10008e44:	04000034 	movhi	r16,0
10008e48:	84018e04 	addi	r16,r16,1592
10008e4c:	80800017 	ldw	r2,0(r16)
10008e50:	10000e1e 	bne	r2,zero,10008e8c <_malloc_r+0xd8>
10008e54:	000b883a 	mov	r5,zero
10008e58:	9009883a 	mov	r4,r18
10008e5c:	0008fa00 	call	10008fa0 <_sbrk_r>
10008e60:	80800015 	stw	r2,0(r16)
10008e64:	00000906 	br	10008e8c <_malloc_r+0xd8>
10008e68:	80800117 	ldw	r2,4(r16)
10008e6c:	1c00021e 	bne	r3,r16,10008e78 <_malloc_r+0xc4>
10008e70:	20800015 	stw	r2,0(r4)
10008e74:	00001506 	br	10008ecc <_malloc_r+0x118>
10008e78:	18800115 	stw	r2,4(r3)
10008e7c:	00001306 	br	10008ecc <_malloc_r+0x118>
10008e80:	8007883a 	mov	r3,r16
10008e84:	84000117 	ldw	r16,4(r16)
10008e88:	003fe406 	br	10008e1c <__flash_rwdata_start+0xffffda04>
10008e8c:	880b883a 	mov	r5,r17
10008e90:	9009883a 	mov	r4,r18
10008e94:	0008fa00 	call	10008fa0 <_sbrk_r>
10008e98:	04ffffc4 	movi	r19,-1
10008e9c:	14ffd526 	beq	r2,r19,10008df4 <__flash_rwdata_start+0xffffd9dc>
10008ea0:	140000c4 	addi	r16,r2,3
10008ea4:	00ffff04 	movi	r3,-4
10008ea8:	80e0703a 	and	r16,r16,r3
10008eac:	1400021e 	bne	r2,r16,10008eb8 <_malloc_r+0x104>
10008eb0:	84400015 	stw	r17,0(r16)
10008eb4:	00000506 	br	10008ecc <_malloc_r+0x118>
10008eb8:	808bc83a 	sub	r5,r16,r2
10008ebc:	9009883a 	mov	r4,r18
10008ec0:	0008fa00 	call	10008fa0 <_sbrk_r>
10008ec4:	14fffa1e 	bne	r2,r19,10008eb0 <__flash_rwdata_start+0xffffda98>
10008ec8:	003fca06 	br	10008df4 <__flash_rwdata_start+0xffffd9dc>
10008ecc:	810002c4 	addi	r4,r16,11
10008ed0:	00bffe04 	movi	r2,-8
10008ed4:	80c00104 	addi	r3,r16,4
10008ed8:	2084703a 	and	r2,r4,r2
10008edc:	10c7c83a 	sub	r3,r2,r3
10008ee0:	18000326 	beq	r3,zero,10008ef0 <_malloc_r+0x13c>
10008ee4:	80e1883a 	add	r16,r16,r3
10008ee8:	00c7c83a 	sub	r3,zero,r3
10008eec:	80c00015 	stw	r3,0(r16)
10008ef0:	dfc00417 	ldw	ra,16(sp)
10008ef4:	dcc00317 	ldw	r19,12(sp)
10008ef8:	dc800217 	ldw	r18,8(sp)
10008efc:	dc400117 	ldw	r17,4(sp)
10008f00:	dc000017 	ldw	r16,0(sp)
10008f04:	dec00504 	addi	sp,sp,20
10008f08:	f800283a 	ret

10008f0c <_puts_r>:
10008f0c:	defffd04 	addi	sp,sp,-12
10008f10:	dc000015 	stw	r16,0(sp)
10008f14:	2021883a 	mov	r16,r4
10008f18:	2809883a 	mov	r4,r5
10008f1c:	dfc00215 	stw	ra,8(sp)
10008f20:	dc400115 	stw	r17,4(sp)
10008f24:	2823883a 	mov	r17,r5
10008f28:	0008ff00 	call	10008ff0 <strlen>
10008f2c:	81400217 	ldw	r5,8(r16)
10008f30:	01040074 	movhi	r4,4097
10008f34:	21240304 	addi	r4,r4,-28660
10008f38:	29000115 	stw	r4,4(r5)
10008f3c:	100f883a 	mov	r7,r2
10008f40:	880d883a 	mov	r6,r17
10008f44:	8009883a 	mov	r4,r16
10008f48:	000900c0 	call	1000900c <__sfvwrite_small_dev>
10008f4c:	00ffffc4 	movi	r3,-1
10008f50:	10c00926 	beq	r2,r3,10008f78 <_puts_r+0x6c>
10008f54:	81400217 	ldw	r5,8(r16)
10008f58:	01800034 	movhi	r6,0
10008f5c:	01c00044 	movi	r7,1
10008f60:	28800117 	ldw	r2,4(r5)
10008f64:	3180bb04 	addi	r6,r6,748
10008f68:	8009883a 	mov	r4,r16
10008f6c:	103ee83a 	callr	r2
10008f70:	10bfffe0 	cmpeqi	r2,r2,-1
10008f74:	0085c83a 	sub	r2,zero,r2
10008f78:	dfc00217 	ldw	ra,8(sp)
10008f7c:	dc400117 	ldw	r17,4(sp)
10008f80:	dc000017 	ldw	r16,0(sp)
10008f84:	dec00304 	addi	sp,sp,12
10008f88:	f800283a 	ret

10008f8c <puts>:
10008f8c:	00800034 	movhi	r2,0
10008f90:	10818304 	addi	r2,r2,1548
10008f94:	200b883a 	mov	r5,r4
10008f98:	11000017 	ldw	r4,0(r2)
10008f9c:	0008f0c1 	jmpi	10008f0c <_puts_r>

10008fa0 <_sbrk_r>:
10008fa0:	defffd04 	addi	sp,sp,-12
10008fa4:	dc000015 	stw	r16,0(sp)
10008fa8:	04000034 	movhi	r16,0
10008fac:	dc400115 	stw	r17,4(sp)
10008fb0:	84019004 	addi	r16,r16,1600
10008fb4:	2023883a 	mov	r17,r4
10008fb8:	2809883a 	mov	r4,r5
10008fbc:	dfc00215 	stw	ra,8(sp)
10008fc0:	80000015 	stw	zero,0(r16)
10008fc4:	00092840 	call	10009284 <sbrk>
10008fc8:	00ffffc4 	movi	r3,-1
10008fcc:	10c0031e 	bne	r2,r3,10008fdc <_sbrk_r+0x3c>
10008fd0:	80c00017 	ldw	r3,0(r16)
10008fd4:	18000126 	beq	r3,zero,10008fdc <_sbrk_r+0x3c>
10008fd8:	88c00015 	stw	r3,0(r17)
10008fdc:	dfc00217 	ldw	ra,8(sp)
10008fe0:	dc400117 	ldw	r17,4(sp)
10008fe4:	dc000017 	ldw	r16,0(sp)
10008fe8:	dec00304 	addi	sp,sp,12
10008fec:	f800283a 	ret

10008ff0 <strlen>:
10008ff0:	2005883a 	mov	r2,r4
10008ff4:	10c00007 	ldb	r3,0(r2)
10008ff8:	18000226 	beq	r3,zero,10009004 <strlen+0x14>
10008ffc:	10800044 	addi	r2,r2,1
10009000:	003ffc06 	br	10008ff4 <__flash_rwdata_start+0xffffdbdc>
10009004:	1105c83a 	sub	r2,r2,r4
10009008:	f800283a 	ret

1000900c <__sfvwrite_small_dev>:
1000900c:	2880000b 	ldhu	r2,0(r5)
10009010:	1080020c 	andi	r2,r2,8
10009014:	10002126 	beq	r2,zero,1000909c <__sfvwrite_small_dev+0x90>
10009018:	2880008f 	ldh	r2,2(r5)
1000901c:	defffa04 	addi	sp,sp,-24
10009020:	dc000015 	stw	r16,0(sp)
10009024:	dfc00515 	stw	ra,20(sp)
10009028:	dd000415 	stw	r20,16(sp)
1000902c:	dcc00315 	stw	r19,12(sp)
10009030:	dc800215 	stw	r18,8(sp)
10009034:	dc400115 	stw	r17,4(sp)
10009038:	2821883a 	mov	r16,r5
1000903c:	10001216 	blt	r2,zero,10009088 <__sfvwrite_small_dev+0x7c>
10009040:	2027883a 	mov	r19,r4
10009044:	3025883a 	mov	r18,r6
10009048:	3823883a 	mov	r17,r7
1000904c:	05010004 	movi	r20,1024
10009050:	04400b0e 	bge	zero,r17,10009080 <__sfvwrite_small_dev+0x74>
10009054:	880f883a 	mov	r7,r17
10009058:	a440010e 	bge	r20,r17,10009060 <__sfvwrite_small_dev+0x54>
1000905c:	01c10004 	movi	r7,1024
10009060:	8140008f 	ldh	r5,2(r16)
10009064:	900d883a 	mov	r6,r18
10009068:	9809883a 	mov	r4,r19
1000906c:	00090c40 	call	100090c4 <_write_r>
10009070:	0080050e 	bge	zero,r2,10009088 <__sfvwrite_small_dev+0x7c>
10009074:	88a3c83a 	sub	r17,r17,r2
10009078:	90a5883a 	add	r18,r18,r2
1000907c:	003ff406 	br	10009050 <__flash_rwdata_start+0xffffdc38>
10009080:	0005883a 	mov	r2,zero
10009084:	00000706 	br	100090a4 <__sfvwrite_small_dev+0x98>
10009088:	8080000b 	ldhu	r2,0(r16)
1000908c:	10801014 	ori	r2,r2,64
10009090:	8080000d 	sth	r2,0(r16)
10009094:	00bfffc4 	movi	r2,-1
10009098:	00000206 	br	100090a4 <__sfvwrite_small_dev+0x98>
1000909c:	00bfffc4 	movi	r2,-1
100090a0:	f800283a 	ret
100090a4:	dfc00517 	ldw	ra,20(sp)
100090a8:	dd000417 	ldw	r20,16(sp)
100090ac:	dcc00317 	ldw	r19,12(sp)
100090b0:	dc800217 	ldw	r18,8(sp)
100090b4:	dc400117 	ldw	r17,4(sp)
100090b8:	dc000017 	ldw	r16,0(sp)
100090bc:	dec00604 	addi	sp,sp,24
100090c0:	f800283a 	ret

100090c4 <_write_r>:
100090c4:	defffd04 	addi	sp,sp,-12
100090c8:	dc000015 	stw	r16,0(sp)
100090cc:	04000034 	movhi	r16,0
100090d0:	dc400115 	stw	r17,4(sp)
100090d4:	84019004 	addi	r16,r16,1600
100090d8:	2023883a 	mov	r17,r4
100090dc:	2809883a 	mov	r4,r5
100090e0:	300b883a 	mov	r5,r6
100090e4:	380d883a 	mov	r6,r7
100090e8:	dfc00215 	stw	ra,8(sp)
100090ec:	80000015 	stw	zero,0(r16)
100090f0:	00093a00 	call	100093a0 <write>
100090f4:	00ffffc4 	movi	r3,-1
100090f8:	10c0031e 	bne	r2,r3,10009108 <_write_r+0x44>
100090fc:	80c00017 	ldw	r3,0(r16)
10009100:	18000126 	beq	r3,zero,10009108 <_write_r+0x44>
10009104:	88c00015 	stw	r3,0(r17)
10009108:	dfc00217 	ldw	ra,8(sp)
1000910c:	dc400117 	ldw	r17,4(sp)
10009110:	dc000017 	ldw	r16,0(sp)
10009114:	dec00304 	addi	sp,sp,12
10009118:	f800283a 	ret

1000911c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000911c:	defffc04 	addi	sp,sp,-16
10009120:	df000315 	stw	fp,12(sp)
10009124:	df000304 	addi	fp,sp,12
10009128:	e13ffd15 	stw	r4,-12(fp)
1000912c:	e17ffe15 	stw	r5,-8(fp)
10009130:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10009134:	e0fffe17 	ldw	r3,-8(fp)
10009138:	e0bffd17 	ldw	r2,-12(fp)
1000913c:	18800c26 	beq	r3,r2,10009170 <alt_load_section+0x54>
  {
    while( to != end )
10009140:	00000806 	br	10009164 <alt_load_section+0x48>
    {
      *to++ = *from++;
10009144:	e0bffe17 	ldw	r2,-8(fp)
10009148:	10c00104 	addi	r3,r2,4
1000914c:	e0fffe15 	stw	r3,-8(fp)
10009150:	e0fffd17 	ldw	r3,-12(fp)
10009154:	19000104 	addi	r4,r3,4
10009158:	e13ffd15 	stw	r4,-12(fp)
1000915c:	18c00017 	ldw	r3,0(r3)
10009160:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10009164:	e0fffe17 	ldw	r3,-8(fp)
10009168:	e0bfff17 	ldw	r2,-4(fp)
1000916c:	18bff51e 	bne	r3,r2,10009144 <__flash_rwdata_start+0xffffdd2c>
    {
      *to++ = *from++;
    }
  }
}
10009170:	0001883a 	nop
10009174:	e037883a 	mov	sp,fp
10009178:	df000017 	ldw	fp,0(sp)
1000917c:	dec00104 	addi	sp,sp,4
10009180:	f800283a 	ret

10009184 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10009184:	defffe04 	addi	sp,sp,-8
10009188:	dfc00115 	stw	ra,4(sp)
1000918c:	df000015 	stw	fp,0(sp)
10009190:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10009194:	01800034 	movhi	r6,0
10009198:	31818e04 	addi	r6,r6,1592
1000919c:	01400034 	movhi	r5,0
100091a0:	2940ca04 	addi	r5,r5,808
100091a4:	01040074 	movhi	r4,4097
100091a8:	212d0604 	addi	r4,r4,-19432
100091ac:	000911c0 	call	1000911c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100091b0:	01840074 	movhi	r6,4097
100091b4:	31a09104 	addi	r6,r6,-32188
100091b8:	01440074 	movhi	r5,4097
100091bc:	29600804 	addi	r5,r5,-32736
100091c0:	01040074 	movhi	r4,4097
100091c4:	21200804 	addi	r4,r4,-32736
100091c8:	000911c0 	call	1000911c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100091cc:	01800034 	movhi	r6,0
100091d0:	3180ca04 	addi	r6,r6,808
100091d4:	01400034 	movhi	r5,0
100091d8:	29400004 	addi	r5,r5,0
100091dc:	01040074 	movhi	r4,4097
100091e0:	212c3c04 	addi	r4,r4,-20240
100091e4:	000911c0 	call	1000911c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100091e8:	0009dd40 	call	10009dd4 <alt_dcache_flush_all>
  alt_icache_flush_all();
100091ec:	0009fc00 	call	10009fc0 <alt_icache_flush_all>
}
100091f0:	0001883a 	nop
100091f4:	e037883a 	mov	sp,fp
100091f8:	dfc00117 	ldw	ra,4(sp)
100091fc:	df000017 	ldw	fp,0(sp)
10009200:	dec00204 	addi	sp,sp,8
10009204:	f800283a 	ret

10009208 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10009208:	defffd04 	addi	sp,sp,-12
1000920c:	dfc00215 	stw	ra,8(sp)
10009210:	df000115 	stw	fp,4(sp)
10009214:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10009218:	0009883a 	mov	r4,zero
1000921c:	00094cc0 	call	100094cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10009220:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10009224:	00095040 	call	10009504 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10009228:	01800034 	movhi	r6,0
1000922c:	3180bc04 	addi	r6,r6,752
10009230:	01400034 	movhi	r5,0
10009234:	2940bc04 	addi	r5,r5,752
10009238:	01000034 	movhi	r4,0
1000923c:	2100bc04 	addi	r4,r4,752
10009240:	000a3580 	call	1000a358 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10009244:	0009f000 	call	10009f00 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10009248:	01040074 	movhi	r4,4097
1000924c:	2127d804 	addi	r4,r4,-24736
10009250:	000abbc0 	call	1000abbc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10009254:	d0a00f17 	ldw	r2,-32708(gp)
10009258:	d0e01017 	ldw	r3,-32704(gp)
1000925c:	d1201117 	ldw	r4,-32700(gp)
10009260:	200d883a 	mov	r6,r4
10009264:	180b883a 	mov	r5,r3
10009268:	1009883a 	mov	r4,r2
1000926c:	00082c80 	call	100082c8 <main>
10009270:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10009274:	01000044 	movi	r4,1
10009278:	0009d040 	call	10009d04 <close>
  exit (result);
1000927c:	e13fff17 	ldw	r4,-4(fp)
10009280:	000abd00 	call	1000abd0 <exit>

10009284 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10009284:	defff904 	addi	sp,sp,-28
10009288:	df000615 	stw	fp,24(sp)
1000928c:	df000604 	addi	fp,sp,24
10009290:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10009294:	0005303a 	rdctl	r2,status
10009298:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000929c:	e0fffe17 	ldw	r3,-8(fp)
100092a0:	00bfff84 	movi	r2,-2
100092a4:	1884703a 	and	r2,r3,r2
100092a8:	1001703a 	wrctl	status,r2
  
  return context;
100092ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100092b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100092b4:	d0a00217 	ldw	r2,-32760(gp)
100092b8:	10c000c4 	addi	r3,r2,3
100092bc:	00bfff04 	movi	r2,-4
100092c0:	1884703a 	and	r2,r3,r2
100092c4:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100092c8:	d0e00217 	ldw	r3,-32760(gp)
100092cc:	e0bfff17 	ldw	r2,-4(fp)
100092d0:	1887883a 	add	r3,r3,r2
100092d4:	00840034 	movhi	r2,4096
100092d8:	10800004 	addi	r2,r2,0
100092dc:	10c0062e 	bgeu	r2,r3,100092f8 <sbrk+0x74>
100092e0:	e0bffb17 	ldw	r2,-20(fp)
100092e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100092e8:	e0bffa17 	ldw	r2,-24(fp)
100092ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100092f0:	00bfffc4 	movi	r2,-1
100092f4:	00000b06 	br	10009324 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
100092f8:	d0a00217 	ldw	r2,-32760(gp)
100092fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10009300:	d0e00217 	ldw	r3,-32760(gp)
10009304:	e0bfff17 	ldw	r2,-4(fp)
10009308:	1885883a 	add	r2,r3,r2
1000930c:	d0a00215 	stw	r2,-32760(gp)
10009310:	e0bffb17 	ldw	r2,-20(fp)
10009314:	e0bffc15 	stw	r2,-16(fp)
10009318:	e0bffc17 	ldw	r2,-16(fp)
1000931c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10009320:	e0bffd17 	ldw	r2,-12(fp)
} 
10009324:	e037883a 	mov	sp,fp
10009328:	df000017 	ldw	fp,0(sp)
1000932c:	dec00104 	addi	sp,sp,4
10009330:	f800283a 	ret

10009334 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10009334:	defffd04 	addi	sp,sp,-12
10009338:	dfc00215 	stw	ra,8(sp)
1000933c:	df000115 	stw	fp,4(sp)
10009340:	df000104 	addi	fp,sp,4
10009344:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10009348:	e13fff17 	ldw	r4,-4(fp)
1000934c:	0009b700 	call	10009b70 <alt_busy_sleep>
}
10009350:	e037883a 	mov	sp,fp
10009354:	dfc00117 	ldw	ra,4(sp)
10009358:	df000017 	ldw	fp,0(sp)
1000935c:	dec00204 	addi	sp,sp,8
10009360:	f800283a 	ret

10009364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009364:	defffe04 	addi	sp,sp,-8
10009368:	dfc00115 	stw	ra,4(sp)
1000936c:	df000015 	stw	fp,0(sp)
10009370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009374:	d0a00817 	ldw	r2,-32736(gp)
10009378:	10000326 	beq	r2,zero,10009388 <alt_get_errno+0x24>
1000937c:	d0a00817 	ldw	r2,-32736(gp)
10009380:	103ee83a 	callr	r2
10009384:	00000106 	br	1000938c <alt_get_errno+0x28>
10009388:	d0a00e04 	addi	r2,gp,-32712
}
1000938c:	e037883a 	mov	sp,fp
10009390:	dfc00117 	ldw	ra,4(sp)
10009394:	df000017 	ldw	fp,0(sp)
10009398:	dec00204 	addi	sp,sp,8
1000939c:	f800283a 	ret

100093a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100093a0:	defff904 	addi	sp,sp,-28
100093a4:	dfc00615 	stw	ra,24(sp)
100093a8:	df000515 	stw	fp,20(sp)
100093ac:	df000504 	addi	fp,sp,20
100093b0:	e13ffd15 	stw	r4,-12(fp)
100093b4:	e17ffe15 	stw	r5,-8(fp)
100093b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100093bc:	e0bffd17 	ldw	r2,-12(fp)
100093c0:	10000616 	blt	r2,zero,100093dc <write+0x3c>
100093c4:	e0bffd17 	ldw	r2,-12(fp)
100093c8:	10c00324 	muli	r3,r2,12
100093cc:	00800034 	movhi	r2,0
100093d0:	10812204 	addi	r2,r2,1160
100093d4:	1885883a 	add	r2,r3,r2
100093d8:	00000106 	br	100093e0 <write+0x40>
100093dc:	0005883a 	mov	r2,zero
100093e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100093e4:	e0bffb17 	ldw	r2,-20(fp)
100093e8:	10002126 	beq	r2,zero,10009470 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100093ec:	e0bffb17 	ldw	r2,-20(fp)
100093f0:	10800217 	ldw	r2,8(r2)
100093f4:	108000cc 	andi	r2,r2,3
100093f8:	10001826 	beq	r2,zero,1000945c <write+0xbc>
100093fc:	e0bffb17 	ldw	r2,-20(fp)
10009400:	10800017 	ldw	r2,0(r2)
10009404:	10800617 	ldw	r2,24(r2)
10009408:	10001426 	beq	r2,zero,1000945c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000940c:	e0bffb17 	ldw	r2,-20(fp)
10009410:	10800017 	ldw	r2,0(r2)
10009414:	10800617 	ldw	r2,24(r2)
10009418:	e0ffff17 	ldw	r3,-4(fp)
1000941c:	180d883a 	mov	r6,r3
10009420:	e17ffe17 	ldw	r5,-8(fp)
10009424:	e13ffb17 	ldw	r4,-20(fp)
10009428:	103ee83a 	callr	r2
1000942c:	e0bffc15 	stw	r2,-16(fp)
10009430:	e0bffc17 	ldw	r2,-16(fp)
10009434:	1000070e 	bge	r2,zero,10009454 <write+0xb4>
      {
        ALT_ERRNO = -rval;
10009438:	00093640 	call	10009364 <alt_get_errno>
1000943c:	1007883a 	mov	r3,r2
10009440:	e0bffc17 	ldw	r2,-16(fp)
10009444:	0085c83a 	sub	r2,zero,r2
10009448:	18800015 	stw	r2,0(r3)
        return -1;
1000944c:	00bfffc4 	movi	r2,-1
10009450:	00000c06 	br	10009484 <write+0xe4>
      }
      return rval;
10009454:	e0bffc17 	ldw	r2,-16(fp)
10009458:	00000a06 	br	10009484 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000945c:	00093640 	call	10009364 <alt_get_errno>
10009460:	1007883a 	mov	r3,r2
10009464:	00800344 	movi	r2,13
10009468:	18800015 	stw	r2,0(r3)
1000946c:	00000406 	br	10009480 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10009470:	00093640 	call	10009364 <alt_get_errno>
10009474:	1007883a 	mov	r3,r2
10009478:	00801444 	movi	r2,81
1000947c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10009480:	00bfffc4 	movi	r2,-1
}
10009484:	e037883a 	mov	sp,fp
10009488:	dfc00117 	ldw	ra,4(sp)
1000948c:	df000017 	ldw	fp,0(sp)
10009490:	dec00204 	addi	sp,sp,8
10009494:	f800283a 	ret

10009498 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10009498:	defffd04 	addi	sp,sp,-12
1000949c:	dfc00215 	stw	ra,8(sp)
100094a0:	df000115 	stw	fp,4(sp)
100094a4:	df000104 	addi	fp,sp,4
100094a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100094ac:	d1600504 	addi	r5,gp,-32748
100094b0:	e13fff17 	ldw	r4,-4(fp)
100094b4:	0009e5c0 	call	10009e5c <alt_dev_llist_insert>
}
100094b8:	e037883a 	mov	sp,fp
100094bc:	dfc00117 	ldw	ra,4(sp)
100094c0:	df000017 	ldw	fp,0(sp)
100094c4:	dec00204 	addi	sp,sp,8
100094c8:	f800283a 	ret

100094cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100094cc:	defffd04 	addi	sp,sp,-12
100094d0:	dfc00215 	stw	ra,8(sp)
100094d4:	df000115 	stw	fp,4(sp)
100094d8:	df000104 	addi	fp,sp,4
100094dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
100094e0:	000a8300 	call	1000a830 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100094e4:	00800044 	movi	r2,1
100094e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100094ec:	0001883a 	nop
100094f0:	e037883a 	mov	sp,fp
100094f4:	dfc00117 	ldw	ra,4(sp)
100094f8:	df000017 	ldw	fp,0(sp)
100094fc:	dec00204 	addi	sp,sp,8
10009500:	f800283a 	ret

10009504 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10009504:	defffe04 	addi	sp,sp,-8
10009508:	dfc00115 	stw	ra,4(sp)
1000950c:	df000015 	stw	fp,0(sp)
10009510:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
10009514:	01c0fa04 	movi	r7,1000
10009518:	01800044 	movi	r6,1
1000951c:	000b883a 	mov	r5,zero
10009520:	01040074 	movhi	r4,4097
10009524:	21044804 	addi	r4,r4,4384
10009528:	00098180 	call	10009818 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
1000952c:	01000034 	movhi	r4,0
10009530:	21010204 	addi	r4,r4,1032
10009534:	00094980 	call	10009498 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
10009538:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
1000953c:	01000034 	movhi	r4,0
10009540:	21010d04 	addi	r4,r4,1076
10009544:	00094980 	call	10009498 <alt_dev_reg>
}
10009548:	0001883a 	nop
1000954c:	e037883a 	mov	sp,fp
10009550:	dfc00117 	ldw	ra,4(sp)
10009554:	df000017 	ldw	fp,0(sp)
10009558:	dec00204 	addi	sp,sp,8
1000955c:	f800283a 	ret

10009560 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10009560:	defffa04 	addi	sp,sp,-24
10009564:	dfc00515 	stw	ra,20(sp)
10009568:	df000415 	stw	fp,16(sp)
1000956c:	df000404 	addi	fp,sp,16
10009570:	e13ffd15 	stw	r4,-12(fp)
10009574:	e17ffe15 	stw	r5,-8(fp)
10009578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000957c:	e0bffd17 	ldw	r2,-12(fp)
10009580:	10800017 	ldw	r2,0(r2)
10009584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10009588:	e0bffc17 	ldw	r2,-16(fp)
1000958c:	10c00a04 	addi	r3,r2,40
10009590:	e0bffd17 	ldw	r2,-12(fp)
10009594:	10800217 	ldw	r2,8(r2)
10009598:	100f883a 	mov	r7,r2
1000959c:	e1bfff17 	ldw	r6,-4(fp)
100095a0:	e17ffe17 	ldw	r5,-8(fp)
100095a4:	1809883a 	mov	r4,r3
100095a8:	00096200 	call	10009620 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100095ac:	e037883a 	mov	sp,fp
100095b0:	dfc00117 	ldw	ra,4(sp)
100095b4:	df000017 	ldw	fp,0(sp)
100095b8:	dec00204 	addi	sp,sp,8
100095bc:	f800283a 	ret

100095c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100095c0:	defffa04 	addi	sp,sp,-24
100095c4:	dfc00515 	stw	ra,20(sp)
100095c8:	df000415 	stw	fp,16(sp)
100095cc:	df000404 	addi	fp,sp,16
100095d0:	e13ffd15 	stw	r4,-12(fp)
100095d4:	e17ffe15 	stw	r5,-8(fp)
100095d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100095dc:	e0bffd17 	ldw	r2,-12(fp)
100095e0:	10800017 	ldw	r2,0(r2)
100095e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100095e8:	e0bffc17 	ldw	r2,-16(fp)
100095ec:	10c00a04 	addi	r3,r2,40
100095f0:	e0bffd17 	ldw	r2,-12(fp)
100095f4:	10800217 	ldw	r2,8(r2)
100095f8:	100f883a 	mov	r7,r2
100095fc:	e1bfff17 	ldw	r6,-4(fp)
10009600:	e17ffe17 	ldw	r5,-8(fp)
10009604:	1809883a 	mov	r4,r3
10009608:	000970c0 	call	1000970c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000960c:	e037883a 	mov	sp,fp
10009610:	dfc00117 	ldw	ra,4(sp)
10009614:	df000017 	ldw	fp,0(sp)
10009618:	dec00204 	addi	sp,sp,8
1000961c:	f800283a 	ret

10009620 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
10009620:	defff704 	addi	sp,sp,-36
10009624:	df000815 	stw	fp,32(sp)
10009628:	df000804 	addi	fp,sp,32
1000962c:	e13ffc15 	stw	r4,-16(fp)
10009630:	e17ffd15 	stw	r5,-12(fp)
10009634:	e1bffe15 	stw	r6,-8(fp)
10009638:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
1000963c:	e0bffc17 	ldw	r2,-16(fp)
10009640:	10800017 	ldw	r2,0(r2)
10009644:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
10009648:	e0bffd17 	ldw	r2,-12(fp)
1000964c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
10009650:	e0bffe17 	ldw	r2,-8(fp)
10009654:	e0fffd17 	ldw	r3,-12(fp)
10009658:	1885883a 	add	r2,r3,r2
1000965c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
10009660:	00001206 	br	100096ac <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10009664:	e0bff917 	ldw	r2,-28(fp)
10009668:	10800037 	ldwio	r2,0(r2)
1000966c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
10009670:	e0bffb17 	ldw	r2,-20(fp)
10009674:	10a0000c 	andi	r2,r2,32768
10009678:	10000626 	beq	r2,zero,10009694 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000967c:	e0bff817 	ldw	r2,-32(fp)
10009680:	10c00044 	addi	r3,r2,1
10009684:	e0fff815 	stw	r3,-32(fp)
10009688:	e0fffb17 	ldw	r3,-20(fp)
1000968c:	10c00005 	stb	r3,0(r2)
10009690:	00000606 	br	100096ac <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
10009694:	e0fff817 	ldw	r3,-32(fp)
10009698:	e0bffd17 	ldw	r2,-12(fp)
1000969c:	1880071e 	bne	r3,r2,100096bc <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
100096a0:	e0bfff17 	ldw	r2,-4(fp)
100096a4:	1090000c 	andi	r2,r2,16384
100096a8:	1000061e 	bne	r2,zero,100096c4 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
100096ac:	e0fff817 	ldw	r3,-32(fp)
100096b0:	e0bffa17 	ldw	r2,-24(fp)
100096b4:	18bfeb36 	bltu	r3,r2,10009664 <__flash_rwdata_start+0xffffe24c>
100096b8:	00000306 	br	100096c8 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
100096bc:	0001883a 	nop
100096c0:	00000106 	br	100096c8 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
100096c4:	0001883a 	nop
    
  }

  if (ptr != buffer)
100096c8:	e0fff817 	ldw	r3,-32(fp)
100096cc:	e0bffd17 	ldw	r2,-12(fp)
100096d0:	18800426 	beq	r3,r2,100096e4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
100096d4:	e0fff817 	ldw	r3,-32(fp)
100096d8:	e0bffd17 	ldw	r2,-12(fp)
100096dc:	1885c83a 	sub	r2,r3,r2
100096e0:	00000606 	br	100096fc <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
100096e4:	e0bfff17 	ldw	r2,-4(fp)
100096e8:	1090000c 	andi	r2,r2,16384
100096ec:	10000226 	beq	r2,zero,100096f8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
100096f0:	00bffd44 	movi	r2,-11
100096f4:	00000106 	br	100096fc <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
100096f8:	00bffec4 	movi	r2,-5
}
100096fc:	e037883a 	mov	sp,fp
10009700:	df000017 	ldw	fp,0(sp)
10009704:	dec00104 	addi	sp,sp,4
10009708:	f800283a 	ret

1000970c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000970c:	defff904 	addi	sp,sp,-28
10009710:	df000615 	stw	fp,24(sp)
10009714:	df000604 	addi	fp,sp,24
10009718:	e13ffc15 	stw	r4,-16(fp)
1000971c:	e17ffd15 	stw	r5,-12(fp)
10009720:	e1bffe15 	stw	r6,-8(fp)
10009724:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
10009728:	e0bffc17 	ldw	r2,-16(fp)
1000972c:	10800017 	ldw	r2,0(r2)
10009730:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
10009734:	e0bffe17 	ldw	r2,-8(fp)
10009738:	e0fffd17 	ldw	r3,-12(fp)
1000973c:	1885883a 	add	r2,r3,r2
10009740:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
10009744:	00000e06 	br	10009780 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
10009748:	e0bffa17 	ldw	r2,-24(fp)
1000974c:	10800104 	addi	r2,r2,4
10009750:	10800037 	ldwio	r2,0(r2)
10009754:	10bfffec 	andhi	r2,r2,65535
10009758:	10000926 	beq	r2,zero,10009780 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
1000975c:	e0fffa17 	ldw	r3,-24(fp)
10009760:	e0bffd17 	ldw	r2,-12(fp)
10009764:	11000044 	addi	r4,r2,1
10009768:	e13ffd15 	stw	r4,-12(fp)
1000976c:	10800003 	ldbu	r2,0(r2)
10009770:	10803fcc 	andi	r2,r2,255
10009774:	1080201c 	xori	r2,r2,128
10009778:	10bfe004 	addi	r2,r2,-128
1000977c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
10009780:	e0fffd17 	ldw	r3,-12(fp)
10009784:	e0bffb17 	ldw	r2,-20(fp)
10009788:	18bfef36 	bltu	r3,r2,10009748 <__flash_rwdata_start+0xffffe330>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
1000978c:	e0bffe17 	ldw	r2,-8(fp)
}
10009790:	e037883a 	mov	sp,fp
10009794:	df000017 	ldw	fp,0(sp)
10009798:	dec00104 	addi	sp,sp,4
1000979c:	f800283a 	ret

100097a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
100097a0:	defffa04 	addi	sp,sp,-24
100097a4:	dfc00515 	stw	ra,20(sp)
100097a8:	df000415 	stw	fp,16(sp)
100097ac:	df000404 	addi	fp,sp,16
100097b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
100097b4:	0007883a 	mov	r3,zero
100097b8:	e0bfff17 	ldw	r2,-4(fp)
100097bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
100097c0:	e0bfff17 	ldw	r2,-4(fp)
100097c4:	10800104 	addi	r2,r2,4
100097c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100097cc:	0005303a 	rdctl	r2,status
100097d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100097d4:	e0fffd17 	ldw	r3,-12(fp)
100097d8:	00bfff84 	movi	r2,-2
100097dc:	1884703a 	and	r2,r3,r2
100097e0:	1001703a 	wrctl	status,r2
  
  return context;
100097e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
100097e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
100097ec:	000a7280 	call	1000a728 <alt_tick>
100097f0:	e0bffc17 	ldw	r2,-16(fp)
100097f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100097f8:	e0bffe17 	ldw	r2,-8(fp)
100097fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
10009800:	0001883a 	nop
10009804:	e037883a 	mov	sp,fp
10009808:	dfc00117 	ldw	ra,4(sp)
1000980c:	df000017 	ldw	fp,0(sp)
10009810:	dec00204 	addi	sp,sp,8
10009814:	f800283a 	ret

10009818 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
10009818:	defff804 	addi	sp,sp,-32
1000981c:	dfc00715 	stw	ra,28(sp)
10009820:	df000615 	stw	fp,24(sp)
10009824:	df000604 	addi	fp,sp,24
10009828:	e13ffc15 	stw	r4,-16(fp)
1000982c:	e17ffd15 	stw	r5,-12(fp)
10009830:	e1bffe15 	stw	r6,-8(fp)
10009834:	e1ffff15 	stw	r7,-4(fp)
10009838:	e0bfff17 	ldw	r2,-4(fp)
1000983c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
10009840:	d0a01317 	ldw	r2,-32692(gp)
10009844:	1000021e 	bne	r2,zero,10009850 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
10009848:	e0bffb17 	ldw	r2,-20(fp)
1000984c:	d0a01315 	stw	r2,-32692(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
10009850:	e0bffc17 	ldw	r2,-16(fp)
10009854:	10800104 	addi	r2,r2,4
10009858:	00c001c4 	movi	r3,7
1000985c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
10009860:	d8000015 	stw	zero,0(sp)
10009864:	e1fffc17 	ldw	r7,-16(fp)
10009868:	01840074 	movhi	r6,4097
1000986c:	31a5e804 	addi	r6,r6,-26720
10009870:	e17ffe17 	ldw	r5,-8(fp)
10009874:	e13ffd17 	ldw	r4,-12(fp)
10009878:	0009ff40 	call	10009ff4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
1000987c:	0001883a 	nop
10009880:	e037883a 	mov	sp,fp
10009884:	dfc00117 	ldw	ra,4(sp)
10009888:	df000017 	ldw	fp,0(sp)
1000988c:	dec00204 	addi	sp,sp,8
10009890:	f800283a 	ret

10009894 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10009894:	defffa04 	addi	sp,sp,-24
10009898:	dfc00515 	stw	ra,20(sp)
1000989c:	df000415 	stw	fp,16(sp)
100098a0:	df000404 	addi	fp,sp,16
100098a4:	e13ffd15 	stw	r4,-12(fp)
100098a8:	e17ffe15 	stw	r5,-8(fp)
100098ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
100098b0:	e0bffd17 	ldw	r2,-12(fp)
100098b4:	10800017 	ldw	r2,0(r2)
100098b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
100098bc:	e0bffc17 	ldw	r2,-16(fp)
100098c0:	10c00a04 	addi	r3,r2,40
100098c4:	e0bffd17 	ldw	r2,-12(fp)
100098c8:	10800217 	ldw	r2,8(r2)
100098cc:	100f883a 	mov	r7,r2
100098d0:	e1bfff17 	ldw	r6,-4(fp)
100098d4:	e17ffe17 	ldw	r5,-8(fp)
100098d8:	1809883a 	mov	r4,r3
100098dc:	00099900 	call	10009990 <altera_avalon_uart_read>
      fd->fd_flags);
}
100098e0:	e037883a 	mov	sp,fp
100098e4:	dfc00117 	ldw	ra,4(sp)
100098e8:	df000017 	ldw	fp,0(sp)
100098ec:	dec00204 	addi	sp,sp,8
100098f0:	f800283a 	ret

100098f4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100098f4:	defffa04 	addi	sp,sp,-24
100098f8:	dfc00515 	stw	ra,20(sp)
100098fc:	df000415 	stw	fp,16(sp)
10009900:	df000404 	addi	fp,sp,16
10009904:	e13ffd15 	stw	r4,-12(fp)
10009908:	e17ffe15 	stw	r5,-8(fp)
1000990c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
10009910:	e0bffd17 	ldw	r2,-12(fp)
10009914:	10800017 	ldw	r2,0(r2)
10009918:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
1000991c:	e0bffc17 	ldw	r2,-16(fp)
10009920:	10c00a04 	addi	r3,r2,40
10009924:	e0bffd17 	ldw	r2,-12(fp)
10009928:	10800217 	ldw	r2,8(r2)
1000992c:	100f883a 	mov	r7,r2
10009930:	e1bfff17 	ldw	r6,-4(fp)
10009934:	e17ffe17 	ldw	r5,-8(fp)
10009938:	1809883a 	mov	r4,r3
1000993c:	0009a900 	call	10009a90 <altera_avalon_uart_write>
      fd->fd_flags);
}
10009940:	e037883a 	mov	sp,fp
10009944:	dfc00117 	ldw	ra,4(sp)
10009948:	df000017 	ldw	fp,0(sp)
1000994c:	dec00204 	addi	sp,sp,8
10009950:	f800283a 	ret

10009954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009954:	defffe04 	addi	sp,sp,-8
10009958:	dfc00115 	stw	ra,4(sp)
1000995c:	df000015 	stw	fp,0(sp)
10009960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009964:	d0a00817 	ldw	r2,-32736(gp)
10009968:	10000326 	beq	r2,zero,10009978 <alt_get_errno+0x24>
1000996c:	d0a00817 	ldw	r2,-32736(gp)
10009970:	103ee83a 	callr	r2
10009974:	00000106 	br	1000997c <alt_get_errno+0x28>
10009978:	d0a00e04 	addi	r2,gp,-32712
}
1000997c:	e037883a 	mov	sp,fp
10009980:	dfc00117 	ldw	ra,4(sp)
10009984:	df000017 	ldw	fp,0(sp)
10009988:	dec00204 	addi	sp,sp,8
1000998c:	f800283a 	ret

10009990 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
10009990:	defff804 	addi	sp,sp,-32
10009994:	dfc00715 	stw	ra,28(sp)
10009998:	df000615 	stw	fp,24(sp)
1000999c:	df000604 	addi	fp,sp,24
100099a0:	e13ffc15 	stw	r4,-16(fp)
100099a4:	e17ffd15 	stw	r5,-12(fp)
100099a8:	e1bffe15 	stw	r6,-8(fp)
100099ac:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
100099b0:	e0bfff17 	ldw	r2,-4(fp)
100099b4:	1090000c 	andi	r2,r2,16384
100099b8:	1005003a 	cmpeq	r2,r2,zero
100099bc:	10803fcc 	andi	r2,r2,255
100099c0:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
100099c4:	e0bffc17 	ldw	r2,-16(fp)
100099c8:	10800017 	ldw	r2,0(r2)
100099cc:	10800204 	addi	r2,r2,8
100099d0:	10800037 	ldwio	r2,0(r2)
100099d4:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
100099d8:	e0bffc17 	ldw	r2,-16(fp)
100099dc:	10800017 	ldw	r2,0(r2)
100099e0:	10800204 	addi	r2,r2,8
100099e4:	0007883a 	mov	r3,zero
100099e8:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
100099ec:	e0bffb17 	ldw	r2,-20(fp)
100099f0:	1080200c 	andi	r2,r2,128
100099f4:	10000b26 	beq	r2,zero,10009a24 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
100099f8:	e0bffc17 	ldw	r2,-16(fp)
100099fc:	10800017 	ldw	r2,0(r2)
10009a00:	10800037 	ldwio	r2,0(r2)
10009a04:	1007883a 	mov	r3,r2
10009a08:	e0bffd17 	ldw	r2,-12(fp)
10009a0c:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
10009a10:	e0bffb17 	ldw	r2,-20(fp)
10009a14:	108000cc 	andi	r2,r2,3
10009a18:	1000021e 	bne	r2,zero,10009a24 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
10009a1c:	00800044 	movi	r2,1
10009a20:	00000706 	br	10009a40 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
10009a24:	e0bffa17 	ldw	r2,-24(fp)
10009a28:	103fe61e 	bne	r2,zero,100099c4 <__flash_rwdata_start+0xffffe5ac>

  ALT_ERRNO = EWOULDBLOCK;
10009a2c:	00099540 	call	10009954 <alt_get_errno>
10009a30:	1007883a 	mov	r3,r2
10009a34:	008002c4 	movi	r2,11
10009a38:	18800015 	stw	r2,0(r3)
 
  return 0;
10009a3c:	0005883a 	mov	r2,zero
}
10009a40:	e037883a 	mov	sp,fp
10009a44:	dfc00117 	ldw	ra,4(sp)
10009a48:	df000017 	ldw	fp,0(sp)
10009a4c:	dec00204 	addi	sp,sp,8
10009a50:	f800283a 	ret

10009a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009a54:	defffe04 	addi	sp,sp,-8
10009a58:	dfc00115 	stw	ra,4(sp)
10009a5c:	df000015 	stw	fp,0(sp)
10009a60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009a64:	d0a00817 	ldw	r2,-32736(gp)
10009a68:	10000326 	beq	r2,zero,10009a78 <alt_get_errno+0x24>
10009a6c:	d0a00817 	ldw	r2,-32736(gp)
10009a70:	103ee83a 	callr	r2
10009a74:	00000106 	br	10009a7c <alt_get_errno+0x28>
10009a78:	d0a00e04 	addi	r2,gp,-32712
}
10009a7c:	e037883a 	mov	sp,fp
10009a80:	dfc00117 	ldw	ra,4(sp)
10009a84:	df000017 	ldw	fp,0(sp)
10009a88:	dec00204 	addi	sp,sp,8
10009a8c:	f800283a 	ret

10009a90 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
10009a90:	defff704 	addi	sp,sp,-36
10009a94:	dfc00815 	stw	ra,32(sp)
10009a98:	df000715 	stw	fp,28(sp)
10009a9c:	df000704 	addi	fp,sp,28
10009aa0:	e13ffc15 	stw	r4,-16(fp)
10009aa4:	e17ffd15 	stw	r5,-12(fp)
10009aa8:	e1bffe15 	stw	r6,-8(fp)
10009aac:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
10009ab0:	e0bfff17 	ldw	r2,-4(fp)
10009ab4:	1090000c 	andi	r2,r2,16384
10009ab8:	1005003a 	cmpeq	r2,r2,zero
10009abc:	10803fcc 	andi	r2,r2,255
10009ac0:	e0bffa15 	stw	r2,-24(fp)
  count = len;
10009ac4:	e0bffe17 	ldw	r2,-8(fp)
10009ac8:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
10009acc:	e0bffc17 	ldw	r2,-16(fp)
10009ad0:	10800017 	ldw	r2,0(r2)
10009ad4:	10800204 	addi	r2,r2,8
10009ad8:	10800037 	ldwio	r2,0(r2)
10009adc:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
10009ae0:	e0bffb17 	ldw	r2,-20(fp)
10009ae4:	1080100c 	andi	r2,r2,64
10009ae8:	10000f26 	beq	r2,zero,10009b28 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
10009aec:	e0bffc17 	ldw	r2,-16(fp)
10009af0:	10800017 	ldw	r2,0(r2)
10009af4:	10800104 	addi	r2,r2,4
10009af8:	1009883a 	mov	r4,r2
10009afc:	e0bffd17 	ldw	r2,-12(fp)
10009b00:	10c00044 	addi	r3,r2,1
10009b04:	e0fffd15 	stw	r3,-12(fp)
10009b08:	10800003 	ldbu	r2,0(r2)
10009b0c:	10803fcc 	andi	r2,r2,255
10009b10:	1080201c 	xori	r2,r2,128
10009b14:	10bfe004 	addi	r2,r2,-128
10009b18:	20800035 	stwio	r2,0(r4)
      count--;
10009b1c:	e0bff917 	ldw	r2,-28(fp)
10009b20:	10bfffc4 	addi	r2,r2,-1
10009b24:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
10009b28:	e0bffa17 	ldw	r2,-24(fp)
10009b2c:	10000226 	beq	r2,zero,10009b38 <altera_avalon_uart_write+0xa8>
10009b30:	e0bff917 	ldw	r2,-28(fp)
10009b34:	103fe51e 	bne	r2,zero,10009acc <__flash_rwdata_start+0xffffe6b4>

  if (count)
10009b38:	e0bff917 	ldw	r2,-28(fp)
10009b3c:	10000426 	beq	r2,zero,10009b50 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
10009b40:	0009a540 	call	10009a54 <alt_get_errno>
10009b44:	1007883a 	mov	r3,r2
10009b48:	008002c4 	movi	r2,11
10009b4c:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
10009b50:	e0fffe17 	ldw	r3,-8(fp)
10009b54:	e0bff917 	ldw	r2,-28(fp)
10009b58:	1885c83a 	sub	r2,r3,r2
}
10009b5c:	e037883a 	mov	sp,fp
10009b60:	dfc00117 	ldw	ra,4(sp)
10009b64:	df000017 	ldw	fp,0(sp)
10009b68:	dec00204 	addi	sp,sp,8
10009b6c:	f800283a 	ret

10009b70 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10009b70:	defffa04 	addi	sp,sp,-24
10009b74:	dfc00515 	stw	ra,20(sp)
10009b78:	df000415 	stw	fp,16(sp)
10009b7c:	df000404 	addi	fp,sp,16
10009b80:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10009b84:	008000c4 	movi	r2,3
10009b88:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10009b8c:	e0fffd17 	ldw	r3,-12(fp)
10009b90:	008003f4 	movhi	r2,15
10009b94:	10909004 	addi	r2,r2,16960
10009b98:	1885383a 	mul	r2,r3,r2
10009b9c:	100b883a 	mov	r5,r2
10009ba0:	0100bef4 	movhi	r4,763
10009ba4:	213c2004 	addi	r4,r4,-3968
10009ba8:	000b0000 	call	1000b000 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10009bac:	100b883a 	mov	r5,r2
10009bb0:	01200034 	movhi	r4,32768
10009bb4:	213fffc4 	addi	r4,r4,-1
10009bb8:	000b0000 	call	1000b000 <__udivsi3>
10009bbc:	100b883a 	mov	r5,r2
10009bc0:	e13fff17 	ldw	r4,-4(fp)
10009bc4:	000b0000 	call	1000b000 <__udivsi3>
10009bc8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10009bcc:	e0bffe17 	ldw	r2,-8(fp)
10009bd0:	10002a26 	beq	r2,zero,10009c7c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10009bd4:	e03ffc15 	stw	zero,-16(fp)
10009bd8:	00001706 	br	10009c38 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10009bdc:	00a00034 	movhi	r2,32768
10009be0:	10bfffc4 	addi	r2,r2,-1
10009be4:	10bfffc4 	addi	r2,r2,-1
10009be8:	103ffe1e 	bne	r2,zero,10009be4 <__flash_rwdata_start+0xffffe7cc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10009bec:	e0fffd17 	ldw	r3,-12(fp)
10009bf0:	008003f4 	movhi	r2,15
10009bf4:	10909004 	addi	r2,r2,16960
10009bf8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10009bfc:	100b883a 	mov	r5,r2
10009c00:	0100bef4 	movhi	r4,763
10009c04:	213c2004 	addi	r4,r4,-3968
10009c08:	000b0000 	call	1000b000 <__udivsi3>
10009c0c:	100b883a 	mov	r5,r2
10009c10:	01200034 	movhi	r4,32768
10009c14:	213fffc4 	addi	r4,r4,-1
10009c18:	000b0000 	call	1000b000 <__udivsi3>
10009c1c:	1007883a 	mov	r3,r2
10009c20:	e0bfff17 	ldw	r2,-4(fp)
10009c24:	10c5c83a 	sub	r2,r2,r3
10009c28:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10009c2c:	e0bffc17 	ldw	r2,-16(fp)
10009c30:	10800044 	addi	r2,r2,1
10009c34:	e0bffc15 	stw	r2,-16(fp)
10009c38:	e0fffc17 	ldw	r3,-16(fp)
10009c3c:	e0bffe17 	ldw	r2,-8(fp)
10009c40:	18bfe616 	blt	r3,r2,10009bdc <__flash_rwdata_start+0xffffe7c4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10009c44:	e0fffd17 	ldw	r3,-12(fp)
10009c48:	008003f4 	movhi	r2,15
10009c4c:	10909004 	addi	r2,r2,16960
10009c50:	1885383a 	mul	r2,r3,r2
10009c54:	100b883a 	mov	r5,r2
10009c58:	0100bef4 	movhi	r4,763
10009c5c:	213c2004 	addi	r4,r4,-3968
10009c60:	000b0000 	call	1000b000 <__udivsi3>
10009c64:	1007883a 	mov	r3,r2
10009c68:	e0bfff17 	ldw	r2,-4(fp)
10009c6c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10009c70:	10bfffc4 	addi	r2,r2,-1
10009c74:	103ffe1e 	bne	r2,zero,10009c70 <__flash_rwdata_start+0xffffe858>
10009c78:	00000d06 	br	10009cb0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10009c7c:	e0fffd17 	ldw	r3,-12(fp)
10009c80:	008003f4 	movhi	r2,15
10009c84:	10909004 	addi	r2,r2,16960
10009c88:	1885383a 	mul	r2,r3,r2
10009c8c:	100b883a 	mov	r5,r2
10009c90:	0100bef4 	movhi	r4,763
10009c94:	213c2004 	addi	r4,r4,-3968
10009c98:	000b0000 	call	1000b000 <__udivsi3>
10009c9c:	1007883a 	mov	r3,r2
10009ca0:	e0bfff17 	ldw	r2,-4(fp)
10009ca4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10009ca8:	10bfffc4 	addi	r2,r2,-1
10009cac:	00bffe16 	blt	zero,r2,10009ca8 <__flash_rwdata_start+0xffffe890>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10009cb0:	0005883a 	mov	r2,zero
}
10009cb4:	e037883a 	mov	sp,fp
10009cb8:	dfc00117 	ldw	ra,4(sp)
10009cbc:	df000017 	ldw	fp,0(sp)
10009cc0:	dec00204 	addi	sp,sp,8
10009cc4:	f800283a 	ret

10009cc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009cc8:	defffe04 	addi	sp,sp,-8
10009ccc:	dfc00115 	stw	ra,4(sp)
10009cd0:	df000015 	stw	fp,0(sp)
10009cd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009cd8:	d0a00817 	ldw	r2,-32736(gp)
10009cdc:	10000326 	beq	r2,zero,10009cec <alt_get_errno+0x24>
10009ce0:	d0a00817 	ldw	r2,-32736(gp)
10009ce4:	103ee83a 	callr	r2
10009ce8:	00000106 	br	10009cf0 <alt_get_errno+0x28>
10009cec:	d0a00e04 	addi	r2,gp,-32712
}
10009cf0:	e037883a 	mov	sp,fp
10009cf4:	dfc00117 	ldw	ra,4(sp)
10009cf8:	df000017 	ldw	fp,0(sp)
10009cfc:	dec00204 	addi	sp,sp,8
10009d00:	f800283a 	ret

10009d04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10009d04:	defffb04 	addi	sp,sp,-20
10009d08:	dfc00415 	stw	ra,16(sp)
10009d0c:	df000315 	stw	fp,12(sp)
10009d10:	df000304 	addi	fp,sp,12
10009d14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10009d18:	e0bfff17 	ldw	r2,-4(fp)
10009d1c:	10000616 	blt	r2,zero,10009d38 <close+0x34>
10009d20:	e0bfff17 	ldw	r2,-4(fp)
10009d24:	10c00324 	muli	r3,r2,12
10009d28:	00800034 	movhi	r2,0
10009d2c:	10812204 	addi	r2,r2,1160
10009d30:	1885883a 	add	r2,r3,r2
10009d34:	00000106 	br	10009d3c <close+0x38>
10009d38:	0005883a 	mov	r2,zero
10009d3c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10009d40:	e0bffd17 	ldw	r2,-12(fp)
10009d44:	10001926 	beq	r2,zero,10009dac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10009d48:	e0bffd17 	ldw	r2,-12(fp)
10009d4c:	10800017 	ldw	r2,0(r2)
10009d50:	10800417 	ldw	r2,16(r2)
10009d54:	10000626 	beq	r2,zero,10009d70 <close+0x6c>
10009d58:	e0bffd17 	ldw	r2,-12(fp)
10009d5c:	10800017 	ldw	r2,0(r2)
10009d60:	10800417 	ldw	r2,16(r2)
10009d64:	e13ffd17 	ldw	r4,-12(fp)
10009d68:	103ee83a 	callr	r2
10009d6c:	00000106 	br	10009d74 <close+0x70>
10009d70:	0005883a 	mov	r2,zero
10009d74:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10009d78:	e13fff17 	ldw	r4,-4(fp)
10009d7c:	000a6280 	call	1000a628 <alt_release_fd>
    if (rval < 0)
10009d80:	e0bffe17 	ldw	r2,-8(fp)
10009d84:	1000070e 	bge	r2,zero,10009da4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10009d88:	0009cc80 	call	10009cc8 <alt_get_errno>
10009d8c:	1007883a 	mov	r3,r2
10009d90:	e0bffe17 	ldw	r2,-8(fp)
10009d94:	0085c83a 	sub	r2,zero,r2
10009d98:	18800015 	stw	r2,0(r3)
      return -1;
10009d9c:	00bfffc4 	movi	r2,-1
10009da0:	00000706 	br	10009dc0 <close+0xbc>
    }
    return 0;
10009da4:	0005883a 	mov	r2,zero
10009da8:	00000506 	br	10009dc0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10009dac:	0009cc80 	call	10009cc8 <alt_get_errno>
10009db0:	1007883a 	mov	r3,r2
10009db4:	00801444 	movi	r2,81
10009db8:	18800015 	stw	r2,0(r3)
    return -1;
10009dbc:	00bfffc4 	movi	r2,-1
  }
}
10009dc0:	e037883a 	mov	sp,fp
10009dc4:	dfc00117 	ldw	ra,4(sp)
10009dc8:	df000017 	ldw	fp,0(sp)
10009dcc:	dec00204 	addi	sp,sp,8
10009dd0:	f800283a 	ret

10009dd4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10009dd4:	deffff04 	addi	sp,sp,-4
10009dd8:	df000015 	stw	fp,0(sp)
10009ddc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10009de0:	0001883a 	nop
10009de4:	e037883a 	mov	sp,fp
10009de8:	df000017 	ldw	fp,0(sp)
10009dec:	dec00104 	addi	sp,sp,4
10009df0:	f800283a 	ret

10009df4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10009df4:	defffc04 	addi	sp,sp,-16
10009df8:	df000315 	stw	fp,12(sp)
10009dfc:	df000304 	addi	fp,sp,12
10009e00:	e13ffd15 	stw	r4,-12(fp)
10009e04:	e17ffe15 	stw	r5,-8(fp)
10009e08:	e1bfff15 	stw	r6,-4(fp)
  return len;
10009e0c:	e0bfff17 	ldw	r2,-4(fp)
}
10009e10:	e037883a 	mov	sp,fp
10009e14:	df000017 	ldw	fp,0(sp)
10009e18:	dec00104 	addi	sp,sp,4
10009e1c:	f800283a 	ret

10009e20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10009e20:	defffe04 	addi	sp,sp,-8
10009e24:	dfc00115 	stw	ra,4(sp)
10009e28:	df000015 	stw	fp,0(sp)
10009e2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10009e30:	d0a00817 	ldw	r2,-32736(gp)
10009e34:	10000326 	beq	r2,zero,10009e44 <alt_get_errno+0x24>
10009e38:	d0a00817 	ldw	r2,-32736(gp)
10009e3c:	103ee83a 	callr	r2
10009e40:	00000106 	br	10009e48 <alt_get_errno+0x28>
10009e44:	d0a00e04 	addi	r2,gp,-32712
}
10009e48:	e037883a 	mov	sp,fp
10009e4c:	dfc00117 	ldw	ra,4(sp)
10009e50:	df000017 	ldw	fp,0(sp)
10009e54:	dec00204 	addi	sp,sp,8
10009e58:	f800283a 	ret

10009e5c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10009e5c:	defffa04 	addi	sp,sp,-24
10009e60:	dfc00515 	stw	ra,20(sp)
10009e64:	df000415 	stw	fp,16(sp)
10009e68:	df000404 	addi	fp,sp,16
10009e6c:	e13ffe15 	stw	r4,-8(fp)
10009e70:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10009e74:	e0bffe17 	ldw	r2,-8(fp)
10009e78:	10000326 	beq	r2,zero,10009e88 <alt_dev_llist_insert+0x2c>
10009e7c:	e0bffe17 	ldw	r2,-8(fp)
10009e80:	10800217 	ldw	r2,8(r2)
10009e84:	1000061e 	bne	r2,zero,10009ea0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10009e88:	0009e200 	call	10009e20 <alt_get_errno>
10009e8c:	1007883a 	mov	r3,r2
10009e90:	00800584 	movi	r2,22
10009e94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10009e98:	00bffa84 	movi	r2,-22
10009e9c:	00001306 	br	10009eec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10009ea0:	e0bffe17 	ldw	r2,-8(fp)
10009ea4:	e0ffff17 	ldw	r3,-4(fp)
10009ea8:	e0fffc15 	stw	r3,-16(fp)
10009eac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10009eb0:	e0bffd17 	ldw	r2,-12(fp)
10009eb4:	e0fffc17 	ldw	r3,-16(fp)
10009eb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10009ebc:	e0bffc17 	ldw	r2,-16(fp)
10009ec0:	10c00017 	ldw	r3,0(r2)
10009ec4:	e0bffd17 	ldw	r2,-12(fp)
10009ec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10009ecc:	e0bffc17 	ldw	r2,-16(fp)
10009ed0:	10800017 	ldw	r2,0(r2)
10009ed4:	e0fffd17 	ldw	r3,-12(fp)
10009ed8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10009edc:	e0bffc17 	ldw	r2,-16(fp)
10009ee0:	e0fffd17 	ldw	r3,-12(fp)
10009ee4:	10c00015 	stw	r3,0(r2)

  return 0;  
10009ee8:	0005883a 	mov	r2,zero
}
10009eec:	e037883a 	mov	sp,fp
10009ef0:	dfc00117 	ldw	ra,4(sp)
10009ef4:	df000017 	ldw	fp,0(sp)
10009ef8:	dec00204 	addi	sp,sp,8
10009efc:	f800283a 	ret

10009f00 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10009f00:	defffd04 	addi	sp,sp,-12
10009f04:	dfc00215 	stw	ra,8(sp)
10009f08:	df000115 	stw	fp,4(sp)
10009f0c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10009f10:	00840074 	movhi	r2,4097
10009f14:	10ac3b04 	addi	r2,r2,-20244
10009f18:	e0bfff15 	stw	r2,-4(fp)
10009f1c:	00000606 	br	10009f38 <_do_ctors+0x38>
        (*ctor) (); 
10009f20:	e0bfff17 	ldw	r2,-4(fp)
10009f24:	10800017 	ldw	r2,0(r2)
10009f28:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10009f2c:	e0bfff17 	ldw	r2,-4(fp)
10009f30:	10bfff04 	addi	r2,r2,-4
10009f34:	e0bfff15 	stw	r2,-4(fp)
10009f38:	e0ffff17 	ldw	r3,-4(fp)
10009f3c:	00840074 	movhi	r2,4097
10009f40:	10ac3c04 	addi	r2,r2,-20240
10009f44:	18bff62e 	bgeu	r3,r2,10009f20 <__flash_rwdata_start+0xffffeb08>
        (*ctor) (); 
}
10009f48:	0001883a 	nop
10009f4c:	e037883a 	mov	sp,fp
10009f50:	dfc00117 	ldw	ra,4(sp)
10009f54:	df000017 	ldw	fp,0(sp)
10009f58:	dec00204 	addi	sp,sp,8
10009f5c:	f800283a 	ret

10009f60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10009f60:	defffd04 	addi	sp,sp,-12
10009f64:	dfc00215 	stw	ra,8(sp)
10009f68:	df000115 	stw	fp,4(sp)
10009f6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10009f70:	00840074 	movhi	r2,4097
10009f74:	10ac3b04 	addi	r2,r2,-20244
10009f78:	e0bfff15 	stw	r2,-4(fp)
10009f7c:	00000606 	br	10009f98 <_do_dtors+0x38>
        (*dtor) (); 
10009f80:	e0bfff17 	ldw	r2,-4(fp)
10009f84:	10800017 	ldw	r2,0(r2)
10009f88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10009f8c:	e0bfff17 	ldw	r2,-4(fp)
10009f90:	10bfff04 	addi	r2,r2,-4
10009f94:	e0bfff15 	stw	r2,-4(fp)
10009f98:	e0ffff17 	ldw	r3,-4(fp)
10009f9c:	00840074 	movhi	r2,4097
10009fa0:	10ac3c04 	addi	r2,r2,-20240
10009fa4:	18bff62e 	bgeu	r3,r2,10009f80 <__flash_rwdata_start+0xffffeb68>
        (*dtor) (); 
}
10009fa8:	0001883a 	nop
10009fac:	e037883a 	mov	sp,fp
10009fb0:	dfc00117 	ldw	ra,4(sp)
10009fb4:	df000017 	ldw	fp,0(sp)
10009fb8:	dec00204 	addi	sp,sp,8
10009fbc:	f800283a 	ret

10009fc0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10009fc0:	defffe04 	addi	sp,sp,-8
10009fc4:	dfc00115 	stw	ra,4(sp)
10009fc8:	df000015 	stw	fp,0(sp)
10009fcc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10009fd0:	01420004 	movi	r5,2048
10009fd4:	0009883a 	mov	r4,zero
10009fd8:	000aa900 	call	1000aa90 <alt_icache_flush>
#endif
}
10009fdc:	0001883a 	nop
10009fe0:	e037883a 	mov	sp,fp
10009fe4:	dfc00117 	ldw	ra,4(sp)
10009fe8:	df000017 	ldw	fp,0(sp)
10009fec:	dec00204 	addi	sp,sp,8
10009ff0:	f800283a 	ret

10009ff4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10009ff4:	defff904 	addi	sp,sp,-28
10009ff8:	dfc00615 	stw	ra,24(sp)
10009ffc:	df000515 	stw	fp,20(sp)
1000a000:	df000504 	addi	fp,sp,20
1000a004:	e13ffc15 	stw	r4,-16(fp)
1000a008:	e17ffd15 	stw	r5,-12(fp)
1000a00c:	e1bffe15 	stw	r6,-8(fp)
1000a010:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000a014:	e0800217 	ldw	r2,8(fp)
1000a018:	d8800015 	stw	r2,0(sp)
1000a01c:	e1ffff17 	ldw	r7,-4(fp)
1000a020:	e1bffe17 	ldw	r6,-8(fp)
1000a024:	e17ffd17 	ldw	r5,-12(fp)
1000a028:	e13ffc17 	ldw	r4,-16(fp)
1000a02c:	000a1a40 	call	1000a1a4 <alt_iic_isr_register>
}  
1000a030:	e037883a 	mov	sp,fp
1000a034:	dfc00117 	ldw	ra,4(sp)
1000a038:	df000017 	ldw	fp,0(sp)
1000a03c:	dec00204 	addi	sp,sp,8
1000a040:	f800283a 	ret

1000a044 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000a044:	defff904 	addi	sp,sp,-28
1000a048:	df000615 	stw	fp,24(sp)
1000a04c:	df000604 	addi	fp,sp,24
1000a050:	e13ffe15 	stw	r4,-8(fp)
1000a054:	e17fff15 	stw	r5,-4(fp)
1000a058:	e0bfff17 	ldw	r2,-4(fp)
1000a05c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000a060:	0005303a 	rdctl	r2,status
1000a064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000a068:	e0fffb17 	ldw	r3,-20(fp)
1000a06c:	00bfff84 	movi	r2,-2
1000a070:	1884703a 	and	r2,r3,r2
1000a074:	1001703a 	wrctl	status,r2
  
  return context;
1000a078:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000a07c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000a080:	00c00044 	movi	r3,1
1000a084:	e0bffa17 	ldw	r2,-24(fp)
1000a088:	1884983a 	sll	r2,r3,r2
1000a08c:	1007883a 	mov	r3,r2
1000a090:	d0a01217 	ldw	r2,-32696(gp)
1000a094:	1884b03a 	or	r2,r3,r2
1000a098:	d0a01215 	stw	r2,-32696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000a09c:	d0a01217 	ldw	r2,-32696(gp)
1000a0a0:	100170fa 	wrctl	ienable,r2
1000a0a4:	e0bffc17 	ldw	r2,-16(fp)
1000a0a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000a0ac:	e0bffd17 	ldw	r2,-12(fp)
1000a0b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000a0b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000a0b8:	0001883a 	nop
}
1000a0bc:	e037883a 	mov	sp,fp
1000a0c0:	df000017 	ldw	fp,0(sp)
1000a0c4:	dec00104 	addi	sp,sp,4
1000a0c8:	f800283a 	ret

1000a0cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000a0cc:	defff904 	addi	sp,sp,-28
1000a0d0:	df000615 	stw	fp,24(sp)
1000a0d4:	df000604 	addi	fp,sp,24
1000a0d8:	e13ffe15 	stw	r4,-8(fp)
1000a0dc:	e17fff15 	stw	r5,-4(fp)
1000a0e0:	e0bfff17 	ldw	r2,-4(fp)
1000a0e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000a0e8:	0005303a 	rdctl	r2,status
1000a0ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000a0f0:	e0fffb17 	ldw	r3,-20(fp)
1000a0f4:	00bfff84 	movi	r2,-2
1000a0f8:	1884703a 	and	r2,r3,r2
1000a0fc:	1001703a 	wrctl	status,r2
  
  return context;
1000a100:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000a104:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000a108:	00c00044 	movi	r3,1
1000a10c:	e0bffa17 	ldw	r2,-24(fp)
1000a110:	1884983a 	sll	r2,r3,r2
1000a114:	0084303a 	nor	r2,zero,r2
1000a118:	1007883a 	mov	r3,r2
1000a11c:	d0a01217 	ldw	r2,-32696(gp)
1000a120:	1884703a 	and	r2,r3,r2
1000a124:	d0a01215 	stw	r2,-32696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000a128:	d0a01217 	ldw	r2,-32696(gp)
1000a12c:	100170fa 	wrctl	ienable,r2
1000a130:	e0bffc17 	ldw	r2,-16(fp)
1000a134:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000a138:	e0bffd17 	ldw	r2,-12(fp)
1000a13c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000a140:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000a144:	0001883a 	nop
}
1000a148:	e037883a 	mov	sp,fp
1000a14c:	df000017 	ldw	fp,0(sp)
1000a150:	dec00104 	addi	sp,sp,4
1000a154:	f800283a 	ret

1000a158 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000a158:	defffc04 	addi	sp,sp,-16
1000a15c:	df000315 	stw	fp,12(sp)
1000a160:	df000304 	addi	fp,sp,12
1000a164:	e13ffe15 	stw	r4,-8(fp)
1000a168:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000a16c:	000530fa 	rdctl	r2,ienable
1000a170:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000a174:	00c00044 	movi	r3,1
1000a178:	e0bfff17 	ldw	r2,-4(fp)
1000a17c:	1884983a 	sll	r2,r3,r2
1000a180:	1007883a 	mov	r3,r2
1000a184:	e0bffd17 	ldw	r2,-12(fp)
1000a188:	1884703a 	and	r2,r3,r2
1000a18c:	1004c03a 	cmpne	r2,r2,zero
1000a190:	10803fcc 	andi	r2,r2,255
}
1000a194:	e037883a 	mov	sp,fp
1000a198:	df000017 	ldw	fp,0(sp)
1000a19c:	dec00104 	addi	sp,sp,4
1000a1a0:	f800283a 	ret

1000a1a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000a1a4:	defff504 	addi	sp,sp,-44
1000a1a8:	dfc00a15 	stw	ra,40(sp)
1000a1ac:	df000915 	stw	fp,36(sp)
1000a1b0:	df000904 	addi	fp,sp,36
1000a1b4:	e13ffc15 	stw	r4,-16(fp)
1000a1b8:	e17ffd15 	stw	r5,-12(fp)
1000a1bc:	e1bffe15 	stw	r6,-8(fp)
1000a1c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000a1c4:	00bffa84 	movi	r2,-22
1000a1c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000a1cc:	e0bffd17 	ldw	r2,-12(fp)
1000a1d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000a1d4:	e0bff817 	ldw	r2,-32(fp)
1000a1d8:	10800808 	cmpgei	r2,r2,32
1000a1dc:	1000271e 	bne	r2,zero,1000a27c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000a1e0:	0005303a 	rdctl	r2,status
1000a1e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000a1e8:	e0fffb17 	ldw	r3,-20(fp)
1000a1ec:	00bfff84 	movi	r2,-2
1000a1f0:	1884703a 	and	r2,r3,r2
1000a1f4:	1001703a 	wrctl	status,r2
  
  return context;
1000a1f8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000a1fc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1000a200:	00800034 	movhi	r2,0
1000a204:	10819804 	addi	r2,r2,1632
1000a208:	e0fff817 	ldw	r3,-32(fp)
1000a20c:	180690fa 	slli	r3,r3,3
1000a210:	10c5883a 	add	r2,r2,r3
1000a214:	e0fffe17 	ldw	r3,-8(fp)
1000a218:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000a21c:	00800034 	movhi	r2,0
1000a220:	10819804 	addi	r2,r2,1632
1000a224:	e0fff817 	ldw	r3,-32(fp)
1000a228:	180690fa 	slli	r3,r3,3
1000a22c:	10c5883a 	add	r2,r2,r3
1000a230:	10800104 	addi	r2,r2,4
1000a234:	e0ffff17 	ldw	r3,-4(fp)
1000a238:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000a23c:	e0bffe17 	ldw	r2,-8(fp)
1000a240:	10000526 	beq	r2,zero,1000a258 <alt_iic_isr_register+0xb4>
1000a244:	e0bff817 	ldw	r2,-32(fp)
1000a248:	100b883a 	mov	r5,r2
1000a24c:	e13ffc17 	ldw	r4,-16(fp)
1000a250:	000a0440 	call	1000a044 <alt_ic_irq_enable>
1000a254:	00000406 	br	1000a268 <alt_iic_isr_register+0xc4>
1000a258:	e0bff817 	ldw	r2,-32(fp)
1000a25c:	100b883a 	mov	r5,r2
1000a260:	e13ffc17 	ldw	r4,-16(fp)
1000a264:	000a0cc0 	call	1000a0cc <alt_ic_irq_disable>
1000a268:	e0bff715 	stw	r2,-36(fp)
1000a26c:	e0bffa17 	ldw	r2,-24(fp)
1000a270:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000a274:	e0bff917 	ldw	r2,-28(fp)
1000a278:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000a27c:	e0bff717 	ldw	r2,-36(fp)
}
1000a280:	e037883a 	mov	sp,fp
1000a284:	dfc00117 	ldw	ra,4(sp)
1000a288:	df000017 	ldw	fp,0(sp)
1000a28c:	dec00204 	addi	sp,sp,8
1000a290:	f800283a 	ret

1000a294 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000a294:	defff904 	addi	sp,sp,-28
1000a298:	dfc00615 	stw	ra,24(sp)
1000a29c:	df000515 	stw	fp,20(sp)
1000a2a0:	df000504 	addi	fp,sp,20
1000a2a4:	e13ffc15 	stw	r4,-16(fp)
1000a2a8:	e17ffd15 	stw	r5,-12(fp)
1000a2ac:	e1bffe15 	stw	r6,-8(fp)
1000a2b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1000a2b4:	e1bfff17 	ldw	r6,-4(fp)
1000a2b8:	e17ffe17 	ldw	r5,-8(fp)
1000a2bc:	e13ffd17 	ldw	r4,-12(fp)
1000a2c0:	000a4d40 	call	1000a4d4 <open>
1000a2c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1000a2c8:	e0bffb17 	ldw	r2,-20(fp)
1000a2cc:	10001c16 	blt	r2,zero,1000a340 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1000a2d0:	00800034 	movhi	r2,0
1000a2d4:	10812204 	addi	r2,r2,1160
1000a2d8:	e0fffb17 	ldw	r3,-20(fp)
1000a2dc:	18c00324 	muli	r3,r3,12
1000a2e0:	10c5883a 	add	r2,r2,r3
1000a2e4:	10c00017 	ldw	r3,0(r2)
1000a2e8:	e0bffc17 	ldw	r2,-16(fp)
1000a2ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000a2f0:	00800034 	movhi	r2,0
1000a2f4:	10812204 	addi	r2,r2,1160
1000a2f8:	e0fffb17 	ldw	r3,-20(fp)
1000a2fc:	18c00324 	muli	r3,r3,12
1000a300:	10c5883a 	add	r2,r2,r3
1000a304:	10800104 	addi	r2,r2,4
1000a308:	10c00017 	ldw	r3,0(r2)
1000a30c:	e0bffc17 	ldw	r2,-16(fp)
1000a310:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000a314:	00800034 	movhi	r2,0
1000a318:	10812204 	addi	r2,r2,1160
1000a31c:	e0fffb17 	ldw	r3,-20(fp)
1000a320:	18c00324 	muli	r3,r3,12
1000a324:	10c5883a 	add	r2,r2,r3
1000a328:	10800204 	addi	r2,r2,8
1000a32c:	10c00017 	ldw	r3,0(r2)
1000a330:	e0bffc17 	ldw	r2,-16(fp)
1000a334:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000a338:	e13ffb17 	ldw	r4,-20(fp)
1000a33c:	000a6280 	call	1000a628 <alt_release_fd>
  }
} 
1000a340:	0001883a 	nop
1000a344:	e037883a 	mov	sp,fp
1000a348:	dfc00117 	ldw	ra,4(sp)
1000a34c:	df000017 	ldw	fp,0(sp)
1000a350:	dec00204 	addi	sp,sp,8
1000a354:	f800283a 	ret

1000a358 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000a358:	defffb04 	addi	sp,sp,-20
1000a35c:	dfc00415 	stw	ra,16(sp)
1000a360:	df000315 	stw	fp,12(sp)
1000a364:	df000304 	addi	fp,sp,12
1000a368:	e13ffd15 	stw	r4,-12(fp)
1000a36c:	e17ffe15 	stw	r5,-8(fp)
1000a370:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000a374:	01c07fc4 	movi	r7,511
1000a378:	01800044 	movi	r6,1
1000a37c:	e17ffd17 	ldw	r5,-12(fp)
1000a380:	01000034 	movhi	r4,0
1000a384:	21012504 	addi	r4,r4,1172
1000a388:	000a2940 	call	1000a294 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000a38c:	01c07fc4 	movi	r7,511
1000a390:	000d883a 	mov	r6,zero
1000a394:	e17ffe17 	ldw	r5,-8(fp)
1000a398:	01000034 	movhi	r4,0
1000a39c:	21012204 	addi	r4,r4,1160
1000a3a0:	000a2940 	call	1000a294 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000a3a4:	01c07fc4 	movi	r7,511
1000a3a8:	01800044 	movi	r6,1
1000a3ac:	e17fff17 	ldw	r5,-4(fp)
1000a3b0:	01000034 	movhi	r4,0
1000a3b4:	21012804 	addi	r4,r4,1184
1000a3b8:	000a2940 	call	1000a294 <alt_open_fd>
}  
1000a3bc:	0001883a 	nop
1000a3c0:	e037883a 	mov	sp,fp
1000a3c4:	dfc00117 	ldw	ra,4(sp)
1000a3c8:	df000017 	ldw	fp,0(sp)
1000a3cc:	dec00204 	addi	sp,sp,8
1000a3d0:	f800283a 	ret

1000a3d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000a3d4:	defffe04 	addi	sp,sp,-8
1000a3d8:	dfc00115 	stw	ra,4(sp)
1000a3dc:	df000015 	stw	fp,0(sp)
1000a3e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000a3e4:	d0a00817 	ldw	r2,-32736(gp)
1000a3e8:	10000326 	beq	r2,zero,1000a3f8 <alt_get_errno+0x24>
1000a3ec:	d0a00817 	ldw	r2,-32736(gp)
1000a3f0:	103ee83a 	callr	r2
1000a3f4:	00000106 	br	1000a3fc <alt_get_errno+0x28>
1000a3f8:	d0a00e04 	addi	r2,gp,-32712
}
1000a3fc:	e037883a 	mov	sp,fp
1000a400:	dfc00117 	ldw	ra,4(sp)
1000a404:	df000017 	ldw	fp,0(sp)
1000a408:	dec00204 	addi	sp,sp,8
1000a40c:	f800283a 	ret

1000a410 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000a410:	defffd04 	addi	sp,sp,-12
1000a414:	df000215 	stw	fp,8(sp)
1000a418:	df000204 	addi	fp,sp,8
1000a41c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000a420:	e0bfff17 	ldw	r2,-4(fp)
1000a424:	10800217 	ldw	r2,8(r2)
1000a428:	10d00034 	orhi	r3,r2,16384
1000a42c:	e0bfff17 	ldw	r2,-4(fp)
1000a430:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000a434:	e03ffe15 	stw	zero,-8(fp)
1000a438:	00001d06 	br	1000a4b0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000a43c:	00800034 	movhi	r2,0
1000a440:	10812204 	addi	r2,r2,1160
1000a444:	e0fffe17 	ldw	r3,-8(fp)
1000a448:	18c00324 	muli	r3,r3,12
1000a44c:	10c5883a 	add	r2,r2,r3
1000a450:	10c00017 	ldw	r3,0(r2)
1000a454:	e0bfff17 	ldw	r2,-4(fp)
1000a458:	10800017 	ldw	r2,0(r2)
1000a45c:	1880111e 	bne	r3,r2,1000a4a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000a460:	00800034 	movhi	r2,0
1000a464:	10812204 	addi	r2,r2,1160
1000a468:	e0fffe17 	ldw	r3,-8(fp)
1000a46c:	18c00324 	muli	r3,r3,12
1000a470:	10c5883a 	add	r2,r2,r3
1000a474:	10800204 	addi	r2,r2,8
1000a478:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000a47c:	1000090e 	bge	r2,zero,1000a4a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000a480:	e0bffe17 	ldw	r2,-8(fp)
1000a484:	10c00324 	muli	r3,r2,12
1000a488:	00800034 	movhi	r2,0
1000a48c:	10812204 	addi	r2,r2,1160
1000a490:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000a494:	e0bfff17 	ldw	r2,-4(fp)
1000a498:	18800226 	beq	r3,r2,1000a4a4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000a49c:	00bffcc4 	movi	r2,-13
1000a4a0:	00000806 	br	1000a4c4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000a4a4:	e0bffe17 	ldw	r2,-8(fp)
1000a4a8:	10800044 	addi	r2,r2,1
1000a4ac:	e0bffe15 	stw	r2,-8(fp)
1000a4b0:	d0a00717 	ldw	r2,-32740(gp)
1000a4b4:	1007883a 	mov	r3,r2
1000a4b8:	e0bffe17 	ldw	r2,-8(fp)
1000a4bc:	18bfdf2e 	bgeu	r3,r2,1000a43c <__flash_rwdata_start+0xfffff024>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000a4c0:	0005883a 	mov	r2,zero
}
1000a4c4:	e037883a 	mov	sp,fp
1000a4c8:	df000017 	ldw	fp,0(sp)
1000a4cc:	dec00104 	addi	sp,sp,4
1000a4d0:	f800283a 	ret

1000a4d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000a4d4:	defff604 	addi	sp,sp,-40
1000a4d8:	dfc00915 	stw	ra,36(sp)
1000a4dc:	df000815 	stw	fp,32(sp)
1000a4e0:	df000804 	addi	fp,sp,32
1000a4e4:	e13ffd15 	stw	r4,-12(fp)
1000a4e8:	e17ffe15 	stw	r5,-8(fp)
1000a4ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000a4f0:	00bfffc4 	movi	r2,-1
1000a4f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000a4f8:	00bffb44 	movi	r2,-19
1000a4fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000a500:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000a504:	d1600504 	addi	r5,gp,-32748
1000a508:	e13ffd17 	ldw	r4,-12(fp)
1000a50c:	000a8540 	call	1000a854 <alt_find_dev>
1000a510:	e0bff815 	stw	r2,-32(fp)
1000a514:	e0bff817 	ldw	r2,-32(fp)
1000a518:	1000051e 	bne	r2,zero,1000a530 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000a51c:	e13ffd17 	ldw	r4,-12(fp)
1000a520:	000a8e40 	call	1000a8e4 <alt_find_file>
1000a524:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000a528:	00800044 	movi	r2,1
1000a52c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000a530:	e0bff817 	ldw	r2,-32(fp)
1000a534:	10002926 	beq	r2,zero,1000a5dc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000a538:	e13ff817 	ldw	r4,-32(fp)
1000a53c:	000a9ec0 	call	1000a9ec <alt_get_fd>
1000a540:	e0bff915 	stw	r2,-28(fp)
1000a544:	e0bff917 	ldw	r2,-28(fp)
1000a548:	1000030e 	bge	r2,zero,1000a558 <open+0x84>
    {
      status = index;
1000a54c:	e0bff917 	ldw	r2,-28(fp)
1000a550:	e0bffa15 	stw	r2,-24(fp)
1000a554:	00002306 	br	1000a5e4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1000a558:	e0bff917 	ldw	r2,-28(fp)
1000a55c:	10c00324 	muli	r3,r2,12
1000a560:	00800034 	movhi	r2,0
1000a564:	10812204 	addi	r2,r2,1160
1000a568:	1885883a 	add	r2,r3,r2
1000a56c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000a570:	e0fffe17 	ldw	r3,-8(fp)
1000a574:	00900034 	movhi	r2,16384
1000a578:	10bfffc4 	addi	r2,r2,-1
1000a57c:	1886703a 	and	r3,r3,r2
1000a580:	e0bffc17 	ldw	r2,-16(fp)
1000a584:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000a588:	e0bffb17 	ldw	r2,-20(fp)
1000a58c:	1000051e 	bne	r2,zero,1000a5a4 <open+0xd0>
1000a590:	e13ffc17 	ldw	r4,-16(fp)
1000a594:	000a4100 	call	1000a410 <alt_file_locked>
1000a598:	e0bffa15 	stw	r2,-24(fp)
1000a59c:	e0bffa17 	ldw	r2,-24(fp)
1000a5a0:	10001016 	blt	r2,zero,1000a5e4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000a5a4:	e0bff817 	ldw	r2,-32(fp)
1000a5a8:	10800317 	ldw	r2,12(r2)
1000a5ac:	10000826 	beq	r2,zero,1000a5d0 <open+0xfc>
1000a5b0:	e0bff817 	ldw	r2,-32(fp)
1000a5b4:	10800317 	ldw	r2,12(r2)
1000a5b8:	e1ffff17 	ldw	r7,-4(fp)
1000a5bc:	e1bffe17 	ldw	r6,-8(fp)
1000a5c0:	e17ffd17 	ldw	r5,-12(fp)
1000a5c4:	e13ffc17 	ldw	r4,-16(fp)
1000a5c8:	103ee83a 	callr	r2
1000a5cc:	00000106 	br	1000a5d4 <open+0x100>
1000a5d0:	0005883a 	mov	r2,zero
1000a5d4:	e0bffa15 	stw	r2,-24(fp)
1000a5d8:	00000206 	br	1000a5e4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000a5dc:	00bffb44 	movi	r2,-19
1000a5e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000a5e4:	e0bffa17 	ldw	r2,-24(fp)
1000a5e8:	1000090e 	bge	r2,zero,1000a610 <open+0x13c>
  {
    alt_release_fd (index);  
1000a5ec:	e13ff917 	ldw	r4,-28(fp)
1000a5f0:	000a6280 	call	1000a628 <alt_release_fd>
    ALT_ERRNO = -status;
1000a5f4:	000a3d40 	call	1000a3d4 <alt_get_errno>
1000a5f8:	1007883a 	mov	r3,r2
1000a5fc:	e0bffa17 	ldw	r2,-24(fp)
1000a600:	0085c83a 	sub	r2,zero,r2
1000a604:	18800015 	stw	r2,0(r3)
    return -1;
1000a608:	00bfffc4 	movi	r2,-1
1000a60c:	00000106 	br	1000a614 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1000a610:	e0bff917 	ldw	r2,-28(fp)
}
1000a614:	e037883a 	mov	sp,fp
1000a618:	dfc00117 	ldw	ra,4(sp)
1000a61c:	df000017 	ldw	fp,0(sp)
1000a620:	dec00204 	addi	sp,sp,8
1000a624:	f800283a 	ret

1000a628 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000a628:	defffe04 	addi	sp,sp,-8
1000a62c:	df000115 	stw	fp,4(sp)
1000a630:	df000104 	addi	fp,sp,4
1000a634:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000a638:	e0bfff17 	ldw	r2,-4(fp)
1000a63c:	108000d0 	cmplti	r2,r2,3
1000a640:	10000d1e 	bne	r2,zero,1000a678 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1000a644:	00800034 	movhi	r2,0
1000a648:	10812204 	addi	r2,r2,1160
1000a64c:	e0ffff17 	ldw	r3,-4(fp)
1000a650:	18c00324 	muli	r3,r3,12
1000a654:	10c5883a 	add	r2,r2,r3
1000a658:	10800204 	addi	r2,r2,8
1000a65c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000a660:	00800034 	movhi	r2,0
1000a664:	10812204 	addi	r2,r2,1160
1000a668:	e0ffff17 	ldw	r3,-4(fp)
1000a66c:	18c00324 	muli	r3,r3,12
1000a670:	10c5883a 	add	r2,r2,r3
1000a674:	10000015 	stw	zero,0(r2)
  }
}
1000a678:	0001883a 	nop
1000a67c:	e037883a 	mov	sp,fp
1000a680:	df000017 	ldw	fp,0(sp)
1000a684:	dec00104 	addi	sp,sp,4
1000a688:	f800283a 	ret

1000a68c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000a68c:	defffa04 	addi	sp,sp,-24
1000a690:	df000515 	stw	fp,20(sp)
1000a694:	df000504 	addi	fp,sp,20
1000a698:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000a69c:	0005303a 	rdctl	r2,status
1000a6a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000a6a4:	e0fffc17 	ldw	r3,-16(fp)
1000a6a8:	00bfff84 	movi	r2,-2
1000a6ac:	1884703a 	and	r2,r3,r2
1000a6b0:	1001703a 	wrctl	status,r2
  
  return context;
1000a6b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000a6b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000a6bc:	e0bfff17 	ldw	r2,-4(fp)
1000a6c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000a6c4:	e0bffd17 	ldw	r2,-12(fp)
1000a6c8:	10800017 	ldw	r2,0(r2)
1000a6cc:	e0fffd17 	ldw	r3,-12(fp)
1000a6d0:	18c00117 	ldw	r3,4(r3)
1000a6d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000a6d8:	e0bffd17 	ldw	r2,-12(fp)
1000a6dc:	10800117 	ldw	r2,4(r2)
1000a6e0:	e0fffd17 	ldw	r3,-12(fp)
1000a6e4:	18c00017 	ldw	r3,0(r3)
1000a6e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000a6ec:	e0bffd17 	ldw	r2,-12(fp)
1000a6f0:	e0fffd17 	ldw	r3,-12(fp)
1000a6f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000a6f8:	e0bffd17 	ldw	r2,-12(fp)
1000a6fc:	e0fffd17 	ldw	r3,-12(fp)
1000a700:	10c00015 	stw	r3,0(r2)
1000a704:	e0bffb17 	ldw	r2,-20(fp)
1000a708:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000a70c:	e0bffe17 	ldw	r2,-8(fp)
1000a710:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000a714:	0001883a 	nop
1000a718:	e037883a 	mov	sp,fp
1000a71c:	df000017 	ldw	fp,0(sp)
1000a720:	dec00104 	addi	sp,sp,4
1000a724:	f800283a 	ret

1000a728 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000a728:	defffb04 	addi	sp,sp,-20
1000a72c:	dfc00415 	stw	ra,16(sp)
1000a730:	df000315 	stw	fp,12(sp)
1000a734:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000a738:	d0a00a17 	ldw	r2,-32728(gp)
1000a73c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000a740:	d0a01417 	ldw	r2,-32688(gp)
1000a744:	10800044 	addi	r2,r2,1
1000a748:	d0a01415 	stw	r2,-32688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000a74c:	00002e06 	br	1000a808 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000a750:	e0bffd17 	ldw	r2,-12(fp)
1000a754:	10800017 	ldw	r2,0(r2)
1000a758:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000a75c:	e0bffd17 	ldw	r2,-12(fp)
1000a760:	10800403 	ldbu	r2,16(r2)
1000a764:	10803fcc 	andi	r2,r2,255
1000a768:	10000426 	beq	r2,zero,1000a77c <alt_tick+0x54>
1000a76c:	d0a01417 	ldw	r2,-32688(gp)
1000a770:	1000021e 	bne	r2,zero,1000a77c <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000a774:	e0bffd17 	ldw	r2,-12(fp)
1000a778:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000a77c:	e0bffd17 	ldw	r2,-12(fp)
1000a780:	10800217 	ldw	r2,8(r2)
1000a784:	d0e01417 	ldw	r3,-32688(gp)
1000a788:	18801d36 	bltu	r3,r2,1000a800 <alt_tick+0xd8>
1000a78c:	e0bffd17 	ldw	r2,-12(fp)
1000a790:	10800403 	ldbu	r2,16(r2)
1000a794:	10803fcc 	andi	r2,r2,255
1000a798:	1000191e 	bne	r2,zero,1000a800 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000a79c:	e0bffd17 	ldw	r2,-12(fp)
1000a7a0:	10800317 	ldw	r2,12(r2)
1000a7a4:	e0fffd17 	ldw	r3,-12(fp)
1000a7a8:	18c00517 	ldw	r3,20(r3)
1000a7ac:	1809883a 	mov	r4,r3
1000a7b0:	103ee83a 	callr	r2
1000a7b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000a7b8:	e0bfff17 	ldw	r2,-4(fp)
1000a7bc:	1000031e 	bne	r2,zero,1000a7cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000a7c0:	e13ffd17 	ldw	r4,-12(fp)
1000a7c4:	000a68c0 	call	1000a68c <alt_alarm_stop>
1000a7c8:	00000d06 	br	1000a800 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000a7cc:	e0bffd17 	ldw	r2,-12(fp)
1000a7d0:	10c00217 	ldw	r3,8(r2)
1000a7d4:	e0bfff17 	ldw	r2,-4(fp)
1000a7d8:	1887883a 	add	r3,r3,r2
1000a7dc:	e0bffd17 	ldw	r2,-12(fp)
1000a7e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000a7e4:	e0bffd17 	ldw	r2,-12(fp)
1000a7e8:	10c00217 	ldw	r3,8(r2)
1000a7ec:	d0a01417 	ldw	r2,-32688(gp)
1000a7f0:	1880032e 	bgeu	r3,r2,1000a800 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000a7f4:	e0bffd17 	ldw	r2,-12(fp)
1000a7f8:	00c00044 	movi	r3,1
1000a7fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000a800:	e0bffe17 	ldw	r2,-8(fp)
1000a804:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000a808:	e0fffd17 	ldw	r3,-12(fp)
1000a80c:	d0a00a04 	addi	r2,gp,-32728
1000a810:	18bfcf1e 	bne	r3,r2,1000a750 <__flash_rwdata_start+0xfffff338>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000a814:	0001883a 	nop
}
1000a818:	0001883a 	nop
1000a81c:	e037883a 	mov	sp,fp
1000a820:	dfc00117 	ldw	ra,4(sp)
1000a824:	df000017 	ldw	fp,0(sp)
1000a828:	dec00204 	addi	sp,sp,8
1000a82c:	f800283a 	ret

1000a830 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000a830:	deffff04 	addi	sp,sp,-4
1000a834:	df000015 	stw	fp,0(sp)
1000a838:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000a83c:	000170fa 	wrctl	ienable,zero
}
1000a840:	0001883a 	nop
1000a844:	e037883a 	mov	sp,fp
1000a848:	df000017 	ldw	fp,0(sp)
1000a84c:	dec00104 	addi	sp,sp,4
1000a850:	f800283a 	ret

1000a854 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000a854:	defffa04 	addi	sp,sp,-24
1000a858:	dfc00515 	stw	ra,20(sp)
1000a85c:	df000415 	stw	fp,16(sp)
1000a860:	df000404 	addi	fp,sp,16
1000a864:	e13ffe15 	stw	r4,-8(fp)
1000a868:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000a86c:	e0bfff17 	ldw	r2,-4(fp)
1000a870:	10800017 	ldw	r2,0(r2)
1000a874:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000a878:	e13ffe17 	ldw	r4,-8(fp)
1000a87c:	0008ff00 	call	10008ff0 <strlen>
1000a880:	10800044 	addi	r2,r2,1
1000a884:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000a888:	00000d06 	br	1000a8c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000a88c:	e0bffc17 	ldw	r2,-16(fp)
1000a890:	10800217 	ldw	r2,8(r2)
1000a894:	e0fffd17 	ldw	r3,-12(fp)
1000a898:	180d883a 	mov	r6,r3
1000a89c:	e17ffe17 	ldw	r5,-8(fp)
1000a8a0:	1009883a 	mov	r4,r2
1000a8a4:	000abf00 	call	1000abf0 <memcmp>
1000a8a8:	1000021e 	bne	r2,zero,1000a8b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000a8ac:	e0bffc17 	ldw	r2,-16(fp)
1000a8b0:	00000706 	br	1000a8d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000a8b4:	e0bffc17 	ldw	r2,-16(fp)
1000a8b8:	10800017 	ldw	r2,0(r2)
1000a8bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000a8c0:	e0fffc17 	ldw	r3,-16(fp)
1000a8c4:	e0bfff17 	ldw	r2,-4(fp)
1000a8c8:	18bff01e 	bne	r3,r2,1000a88c <__flash_rwdata_start+0xfffff474>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000a8cc:	0005883a 	mov	r2,zero
}
1000a8d0:	e037883a 	mov	sp,fp
1000a8d4:	dfc00117 	ldw	ra,4(sp)
1000a8d8:	df000017 	ldw	fp,0(sp)
1000a8dc:	dec00204 	addi	sp,sp,8
1000a8e0:	f800283a 	ret

1000a8e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000a8e4:	defffb04 	addi	sp,sp,-20
1000a8e8:	dfc00415 	stw	ra,16(sp)
1000a8ec:	df000315 	stw	fp,12(sp)
1000a8f0:	df000304 	addi	fp,sp,12
1000a8f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000a8f8:	d0a00317 	ldw	r2,-32756(gp)
1000a8fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000a900:	00003106 	br	1000a9c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1000a904:	e0bffd17 	ldw	r2,-12(fp)
1000a908:	10800217 	ldw	r2,8(r2)
1000a90c:	1009883a 	mov	r4,r2
1000a910:	0008ff00 	call	10008ff0 <strlen>
1000a914:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000a918:	e0bffd17 	ldw	r2,-12(fp)
1000a91c:	10c00217 	ldw	r3,8(r2)
1000a920:	e0bffe17 	ldw	r2,-8(fp)
1000a924:	10bfffc4 	addi	r2,r2,-1
1000a928:	1885883a 	add	r2,r3,r2
1000a92c:	10800003 	ldbu	r2,0(r2)
1000a930:	10803fcc 	andi	r2,r2,255
1000a934:	1080201c 	xori	r2,r2,128
1000a938:	10bfe004 	addi	r2,r2,-128
1000a93c:	10800bd8 	cmpnei	r2,r2,47
1000a940:	1000031e 	bne	r2,zero,1000a950 <alt_find_file+0x6c>
    {
      len -= 1;
1000a944:	e0bffe17 	ldw	r2,-8(fp)
1000a948:	10bfffc4 	addi	r2,r2,-1
1000a94c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000a950:	e0bffe17 	ldw	r2,-8(fp)
1000a954:	e0ffff17 	ldw	r3,-4(fp)
1000a958:	1885883a 	add	r2,r3,r2
1000a95c:	10800003 	ldbu	r2,0(r2)
1000a960:	10803fcc 	andi	r2,r2,255
1000a964:	1080201c 	xori	r2,r2,128
1000a968:	10bfe004 	addi	r2,r2,-128
1000a96c:	10800be0 	cmpeqi	r2,r2,47
1000a970:	1000081e 	bne	r2,zero,1000a994 <alt_find_file+0xb0>
1000a974:	e0bffe17 	ldw	r2,-8(fp)
1000a978:	e0ffff17 	ldw	r3,-4(fp)
1000a97c:	1885883a 	add	r2,r3,r2
1000a980:	10800003 	ldbu	r2,0(r2)
1000a984:	10803fcc 	andi	r2,r2,255
1000a988:	1080201c 	xori	r2,r2,128
1000a98c:	10bfe004 	addi	r2,r2,-128
1000a990:	10000a1e 	bne	r2,zero,1000a9bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1000a994:	e0bffd17 	ldw	r2,-12(fp)
1000a998:	10800217 	ldw	r2,8(r2)
1000a99c:	e0fffe17 	ldw	r3,-8(fp)
1000a9a0:	180d883a 	mov	r6,r3
1000a9a4:	e17fff17 	ldw	r5,-4(fp)
1000a9a8:	1009883a 	mov	r4,r2
1000a9ac:	000abf00 	call	1000abf0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000a9b0:	1000021e 	bne	r2,zero,1000a9bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000a9b4:	e0bffd17 	ldw	r2,-12(fp)
1000a9b8:	00000706 	br	1000a9d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1000a9bc:	e0bffd17 	ldw	r2,-12(fp)
1000a9c0:	10800017 	ldw	r2,0(r2)
1000a9c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000a9c8:	e0fffd17 	ldw	r3,-12(fp)
1000a9cc:	d0a00304 	addi	r2,gp,-32756
1000a9d0:	18bfcc1e 	bne	r3,r2,1000a904 <__flash_rwdata_start+0xfffff4ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000a9d4:	0005883a 	mov	r2,zero
}
1000a9d8:	e037883a 	mov	sp,fp
1000a9dc:	dfc00117 	ldw	ra,4(sp)
1000a9e0:	df000017 	ldw	fp,0(sp)
1000a9e4:	dec00204 	addi	sp,sp,8
1000a9e8:	f800283a 	ret

1000a9ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000a9ec:	defffc04 	addi	sp,sp,-16
1000a9f0:	df000315 	stw	fp,12(sp)
1000a9f4:	df000304 	addi	fp,sp,12
1000a9f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1000a9fc:	00bffa04 	movi	r2,-24
1000aa00:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000aa04:	e03ffd15 	stw	zero,-12(fp)
1000aa08:	00001906 	br	1000aa70 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
1000aa0c:	00800034 	movhi	r2,0
1000aa10:	10812204 	addi	r2,r2,1160
1000aa14:	e0fffd17 	ldw	r3,-12(fp)
1000aa18:	18c00324 	muli	r3,r3,12
1000aa1c:	10c5883a 	add	r2,r2,r3
1000aa20:	10800017 	ldw	r2,0(r2)
1000aa24:	10000f1e 	bne	r2,zero,1000aa64 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
1000aa28:	00800034 	movhi	r2,0
1000aa2c:	10812204 	addi	r2,r2,1160
1000aa30:	e0fffd17 	ldw	r3,-12(fp)
1000aa34:	18c00324 	muli	r3,r3,12
1000aa38:	10c5883a 	add	r2,r2,r3
1000aa3c:	e0ffff17 	ldw	r3,-4(fp)
1000aa40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000aa44:	d0e00717 	ldw	r3,-32740(gp)
1000aa48:	e0bffd17 	ldw	r2,-12(fp)
1000aa4c:	1880020e 	bge	r3,r2,1000aa58 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
1000aa50:	e0bffd17 	ldw	r2,-12(fp)
1000aa54:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
1000aa58:	e0bffd17 	ldw	r2,-12(fp)
1000aa5c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1000aa60:	00000606 	br	1000aa7c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000aa64:	e0bffd17 	ldw	r2,-12(fp)
1000aa68:	10800044 	addi	r2,r2,1
1000aa6c:	e0bffd15 	stw	r2,-12(fp)
1000aa70:	e0bffd17 	ldw	r2,-12(fp)
1000aa74:	10800810 	cmplti	r2,r2,32
1000aa78:	103fe41e 	bne	r2,zero,1000aa0c <__flash_rwdata_start+0xfffff5f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000aa7c:	e0bffe17 	ldw	r2,-8(fp)
}
1000aa80:	e037883a 	mov	sp,fp
1000aa84:	df000017 	ldw	fp,0(sp)
1000aa88:	dec00104 	addi	sp,sp,4
1000aa8c:	f800283a 	ret

1000aa90 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1000aa90:	defffb04 	addi	sp,sp,-20
1000aa94:	df000415 	stw	fp,16(sp)
1000aa98:	df000404 	addi	fp,sp,16
1000aa9c:	e13ffe15 	stw	r4,-8(fp)
1000aaa0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1000aaa4:	e0bfff17 	ldw	r2,-4(fp)
1000aaa8:	10820070 	cmpltui	r2,r2,2049
1000aaac:	1000021e 	bne	r2,zero,1000aab8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1000aab0:	00820004 	movi	r2,2048
1000aab4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
1000aab8:	e0fffe17 	ldw	r3,-8(fp)
1000aabc:	e0bfff17 	ldw	r2,-4(fp)
1000aac0:	1885883a 	add	r2,r3,r2
1000aac4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1000aac8:	e0bffe17 	ldw	r2,-8(fp)
1000aacc:	e0bffc15 	stw	r2,-16(fp)
1000aad0:	00000506 	br	1000aae8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1000aad4:	e0bffc17 	ldw	r2,-16(fp)
1000aad8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1000aadc:	e0bffc17 	ldw	r2,-16(fp)
1000aae0:	10800804 	addi	r2,r2,32
1000aae4:	e0bffc15 	stw	r2,-16(fp)
1000aae8:	e0fffc17 	ldw	r3,-16(fp)
1000aaec:	e0bffd17 	ldw	r2,-12(fp)
1000aaf0:	18bff836 	bltu	r3,r2,1000aad4 <__flash_rwdata_start+0xfffff6bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1000aaf4:	e0bffe17 	ldw	r2,-8(fp)
1000aaf8:	108007cc 	andi	r2,r2,31
1000aafc:	10000226 	beq	r2,zero,1000ab08 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1000ab00:	e0bffc17 	ldw	r2,-16(fp)
1000ab04:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1000ab08:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
1000ab0c:	0001883a 	nop
1000ab10:	e037883a 	mov	sp,fp
1000ab14:	df000017 	ldw	fp,0(sp)
1000ab18:	dec00104 	addi	sp,sp,4
1000ab1c:	f800283a 	ret

1000ab20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000ab20:	defffe04 	addi	sp,sp,-8
1000ab24:	df000115 	stw	fp,4(sp)
1000ab28:	df000104 	addi	fp,sp,4
1000ab2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000ab30:	e0bfff17 	ldw	r2,-4(fp)
1000ab34:	10bffe84 	addi	r2,r2,-6
1000ab38:	10c00428 	cmpgeui	r3,r2,16
1000ab3c:	18001a1e 	bne	r3,zero,1000aba8 <alt_exception_cause_generated_bad_addr+0x88>
1000ab40:	100690ba 	slli	r3,r2,2
1000ab44:	00840074 	movhi	r2,4097
1000ab48:	10aad604 	addi	r2,r2,-21672
1000ab4c:	1885883a 	add	r2,r3,r2
1000ab50:	10800017 	ldw	r2,0(r2)
1000ab54:	1000683a 	jmp	r2
1000ab58:	1000ab98 	cmpnei	zero,r2,686
1000ab5c:	1000ab98 	cmpnei	zero,r2,686
1000ab60:	1000aba8 	cmpgeui	zero,r2,686
1000ab64:	1000aba8 	cmpgeui	zero,r2,686
1000ab68:	1000aba8 	cmpgeui	zero,r2,686
1000ab6c:	1000ab98 	cmpnei	zero,r2,686
1000ab70:	1000aba0 	cmpeqi	zero,r2,686
1000ab74:	1000aba8 	cmpgeui	zero,r2,686
1000ab78:	1000ab98 	cmpnei	zero,r2,686
1000ab7c:	1000ab98 	cmpnei	zero,r2,686
1000ab80:	1000aba8 	cmpgeui	zero,r2,686
1000ab84:	1000ab98 	cmpnei	zero,r2,686
1000ab88:	1000aba0 	cmpeqi	zero,r2,686
1000ab8c:	1000aba8 	cmpgeui	zero,r2,686
1000ab90:	1000aba8 	cmpgeui	zero,r2,686
1000ab94:	1000ab98 	cmpnei	zero,r2,686
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000ab98:	00800044 	movi	r2,1
1000ab9c:	00000306 	br	1000abac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1000aba0:	0005883a 	mov	r2,zero
1000aba4:	00000106 	br	1000abac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1000aba8:	0005883a 	mov	r2,zero
  }
}
1000abac:	e037883a 	mov	sp,fp
1000abb0:	df000017 	ldw	fp,0(sp)
1000abb4:	dec00104 	addi	sp,sp,4
1000abb8:	f800283a 	ret

1000abbc <atexit>:
1000abbc:	200b883a 	mov	r5,r4
1000abc0:	000f883a 	mov	r7,zero
1000abc4:	000d883a 	mov	r6,zero
1000abc8:	0009883a 	mov	r4,zero
1000abcc:	000ac201 	jmpi	1000ac20 <__register_exitproc>

1000abd0 <exit>:
1000abd0:	defffe04 	addi	sp,sp,-8
1000abd4:	000b883a 	mov	r5,zero
1000abd8:	dc000015 	stw	r16,0(sp)
1000abdc:	dfc00115 	stw	ra,4(sp)
1000abe0:	2021883a 	mov	r16,r4
1000abe4:	000ad780 	call	1000ad78 <__call_exitprocs>
1000abe8:	8009883a 	mov	r4,r16
1000abec:	000b0bc0 	call	1000b0bc <_exit>

1000abf0 <memcmp>:
1000abf0:	218d883a 	add	r6,r4,r6
1000abf4:	21800826 	beq	r4,r6,1000ac18 <memcmp+0x28>
1000abf8:	20800003 	ldbu	r2,0(r4)
1000abfc:	28c00003 	ldbu	r3,0(r5)
1000ac00:	10c00226 	beq	r2,r3,1000ac0c <memcmp+0x1c>
1000ac04:	10c5c83a 	sub	r2,r2,r3
1000ac08:	f800283a 	ret
1000ac0c:	21000044 	addi	r4,r4,1
1000ac10:	29400044 	addi	r5,r5,1
1000ac14:	003ff706 	br	1000abf4 <__flash_rwdata_start+0xfffff7dc>
1000ac18:	0005883a 	mov	r2,zero
1000ac1c:	f800283a 	ret

1000ac20 <__register_exitproc>:
1000ac20:	00800034 	movhi	r2,0
1000ac24:	10818204 	addi	r2,r2,1544
1000ac28:	10c00017 	ldw	r3,0(r2)
1000ac2c:	defff904 	addi	sp,sp,-28
1000ac30:	dc000015 	stw	r16,0(sp)
1000ac34:	1c000c17 	ldw	r16,48(r3)
1000ac38:	dd400515 	stw	r21,20(sp)
1000ac3c:	dd000415 	stw	r20,16(sp)
1000ac40:	dcc00315 	stw	r19,12(sp)
1000ac44:	dc800215 	stw	r18,8(sp)
1000ac48:	dc400115 	stw	r17,4(sp)
1000ac4c:	dfc00615 	stw	ra,24(sp)
1000ac50:	202b883a 	mov	r21,r4
1000ac54:	2823883a 	mov	r17,r5
1000ac58:	3027883a 	mov	r19,r6
1000ac5c:	3825883a 	mov	r18,r7
1000ac60:	1029883a 	mov	r20,r2
1000ac64:	8000021e 	bne	r16,zero,1000ac70 <__register_exitproc+0x50>
1000ac68:	1c000d04 	addi	r16,r3,52
1000ac6c:	1c000c15 	stw	r16,48(r3)
1000ac70:	80800117 	ldw	r2,4(r16)
1000ac74:	00c007c4 	movi	r3,31
1000ac78:	1880110e 	bge	r3,r2,1000acc0 <__register_exitproc+0xa0>
1000ac7c:	00840074 	movhi	r2,4097
1000ac80:	10a32a04 	addi	r2,r2,-29528
1000ac84:	1000021e 	bne	r2,zero,1000ac90 <__register_exitproc+0x70>
1000ac88:	00bfffc4 	movi	r2,-1
1000ac8c:	00003106 	br	1000ad54 <__register_exitproc+0x134>
1000ac90:	01002304 	movi	r4,140
1000ac94:	0008ca80 	call	10008ca8 <malloc>
1000ac98:	1021883a 	mov	r16,r2
1000ac9c:	103ffa26 	beq	r2,zero,1000ac88 <__flash_rwdata_start+0xfffff870>
1000aca0:	10000115 	stw	zero,4(r2)
1000aca4:	a0800017 	ldw	r2,0(r20)
1000aca8:	10c00c17 	ldw	r3,48(r2)
1000acac:	80c00015 	stw	r3,0(r16)
1000acb0:	14000c15 	stw	r16,48(r2)
1000acb4:	80002215 	stw	zero,136(r16)
1000acb8:	a8001d26 	beq	r21,zero,1000ad30 <__register_exitproc+0x110>
1000acbc:	00000606 	br	1000acd8 <__register_exitproc+0xb8>
1000acc0:	a8001b26 	beq	r21,zero,1000ad30 <__register_exitproc+0x110>
1000acc4:	80802217 	ldw	r2,136(r16)
1000acc8:	1000091e 	bne	r2,zero,1000acf0 <__register_exitproc+0xd0>
1000accc:	00840074 	movhi	r2,4097
1000acd0:	10a32a04 	addi	r2,r2,-29528
1000acd4:	103fec26 	beq	r2,zero,1000ac88 <__flash_rwdata_start+0xfffff870>
1000acd8:	01004204 	movi	r4,264
1000acdc:	0008ca80 	call	10008ca8 <malloc>
1000ace0:	103fe926 	beq	r2,zero,1000ac88 <__flash_rwdata_start+0xfffff870>
1000ace4:	10004015 	stw	zero,256(r2)
1000ace8:	10004115 	stw	zero,260(r2)
1000acec:	80802215 	stw	r2,136(r16)
1000acf0:	81400117 	ldw	r5,4(r16)
1000acf4:	01000044 	movi	r4,1
1000acf8:	2947883a 	add	r3,r5,r5
1000acfc:	18c7883a 	add	r3,r3,r3
1000ad00:	10c7883a 	add	r3,r2,r3
1000ad04:	1cc00015 	stw	r19,0(r3)
1000ad08:	2148983a 	sll	r4,r4,r5
1000ad0c:	11404017 	ldw	r5,256(r2)
1000ad10:	290ab03a 	or	r5,r5,r4
1000ad14:	11404015 	stw	r5,256(r2)
1000ad18:	1c802015 	stw	r18,128(r3)
1000ad1c:	00c00084 	movi	r3,2
1000ad20:	a8c0031e 	bne	r21,r3,1000ad30 <__register_exitproc+0x110>
1000ad24:	10c04117 	ldw	r3,260(r2)
1000ad28:	1908b03a 	or	r4,r3,r4
1000ad2c:	11004115 	stw	r4,260(r2)
1000ad30:	80800117 	ldw	r2,4(r16)
1000ad34:	10c00044 	addi	r3,r2,1
1000ad38:	10800084 	addi	r2,r2,2
1000ad3c:	1085883a 	add	r2,r2,r2
1000ad40:	1085883a 	add	r2,r2,r2
1000ad44:	80c00115 	stw	r3,4(r16)
1000ad48:	80a1883a 	add	r16,r16,r2
1000ad4c:	84400015 	stw	r17,0(r16)
1000ad50:	0005883a 	mov	r2,zero
1000ad54:	dfc00617 	ldw	ra,24(sp)
1000ad58:	dd400517 	ldw	r21,20(sp)
1000ad5c:	dd000417 	ldw	r20,16(sp)
1000ad60:	dcc00317 	ldw	r19,12(sp)
1000ad64:	dc800217 	ldw	r18,8(sp)
1000ad68:	dc400117 	ldw	r17,4(sp)
1000ad6c:	dc000017 	ldw	r16,0(sp)
1000ad70:	dec00704 	addi	sp,sp,28
1000ad74:	f800283a 	ret

1000ad78 <__call_exitprocs>:
1000ad78:	defff504 	addi	sp,sp,-44
1000ad7c:	dd000515 	stw	r20,20(sp)
1000ad80:	05000034 	movhi	r20,0
1000ad84:	dc800315 	stw	r18,12(sp)
1000ad88:	dfc00a15 	stw	ra,40(sp)
1000ad8c:	df000915 	stw	fp,36(sp)
1000ad90:	ddc00815 	stw	r23,32(sp)
1000ad94:	dd800715 	stw	r22,28(sp)
1000ad98:	dd400615 	stw	r21,24(sp)
1000ad9c:	dcc00415 	stw	r19,16(sp)
1000ada0:	dc400215 	stw	r17,8(sp)
1000ada4:	dc000115 	stw	r16,4(sp)
1000ada8:	d9000015 	stw	r4,0(sp)
1000adac:	2825883a 	mov	r18,r5
1000adb0:	a5018204 	addi	r20,r20,1544
1000adb4:	a4400017 	ldw	r17,0(r20)
1000adb8:	8cc00c17 	ldw	r19,48(r17)
1000adbc:	8c400c04 	addi	r17,r17,48
1000adc0:	98004526 	beq	r19,zero,1000aed8 <__call_exitprocs+0x160>
1000adc4:	9c000117 	ldw	r16,4(r19)
1000adc8:	00900034 	movhi	r2,16384
1000adcc:	10bfffc4 	addi	r2,r2,-1
1000add0:	9d402217 	ldw	r21,136(r19)
1000add4:	85bfffc4 	addi	r22,r16,-1
1000add8:	80a1883a 	add	r16,r16,r2
1000addc:	8421883a 	add	r16,r16,r16
1000ade0:	8421883a 	add	r16,r16,r16
1000ade4:	ac2f883a 	add	r23,r21,r16
1000ade8:	84000204 	addi	r16,r16,8
1000adec:	9c21883a 	add	r16,r19,r16
1000adf0:	b0002716 	blt	r22,zero,1000ae90 <__call_exitprocs+0x118>
1000adf4:	90000726 	beq	r18,zero,1000ae14 <__call_exitprocs+0x9c>
1000adf8:	a800041e 	bne	r21,zero,1000ae0c <__call_exitprocs+0x94>
1000adfc:	b5bfffc4 	addi	r22,r22,-1
1000ae00:	bdffff04 	addi	r23,r23,-4
1000ae04:	843fff04 	addi	r16,r16,-4
1000ae08:	003ff906 	br	1000adf0 <__flash_rwdata_start+0xfffff9d8>
1000ae0c:	b9002017 	ldw	r4,128(r23)
1000ae10:	913ffa1e 	bne	r18,r4,1000adfc <__flash_rwdata_start+0xfffff9e4>
1000ae14:	99000117 	ldw	r4,4(r19)
1000ae18:	82000017 	ldw	r8,0(r16)
1000ae1c:	213fffc4 	addi	r4,r4,-1
1000ae20:	b100021e 	bne	r22,r4,1000ae2c <__call_exitprocs+0xb4>
1000ae24:	9d800115 	stw	r22,4(r19)
1000ae28:	00000106 	br	1000ae30 <__call_exitprocs+0xb8>
1000ae2c:	80000015 	stw	zero,0(r16)
1000ae30:	403ff226 	beq	r8,zero,1000adfc <__flash_rwdata_start+0xfffff9e4>
1000ae34:	9f000117 	ldw	fp,4(r19)
1000ae38:	a8000526 	beq	r21,zero,1000ae50 <__call_exitprocs+0xd8>
1000ae3c:	00800044 	movi	r2,1
1000ae40:	1592983a 	sll	r9,r2,r22
1000ae44:	a9404017 	ldw	r5,256(r21)
1000ae48:	494a703a 	and	r5,r9,r5
1000ae4c:	2800021e 	bne	r5,zero,1000ae58 <__call_exitprocs+0xe0>
1000ae50:	403ee83a 	callr	r8
1000ae54:	00000906 	br	1000ae7c <__call_exitprocs+0x104>
1000ae58:	a9004117 	ldw	r4,260(r21)
1000ae5c:	4908703a 	and	r4,r9,r4
1000ae60:	2000041e 	bne	r4,zero,1000ae74 <__call_exitprocs+0xfc>
1000ae64:	b9400017 	ldw	r5,0(r23)
1000ae68:	d9000017 	ldw	r4,0(sp)
1000ae6c:	403ee83a 	callr	r8
1000ae70:	00000206 	br	1000ae7c <__call_exitprocs+0x104>
1000ae74:	b9000017 	ldw	r4,0(r23)
1000ae78:	403ee83a 	callr	r8
1000ae7c:	99000117 	ldw	r4,4(r19)
1000ae80:	e13fcc1e 	bne	fp,r4,1000adb4 <__flash_rwdata_start+0xfffff99c>
1000ae84:	89000017 	ldw	r4,0(r17)
1000ae88:	993fdc26 	beq	r19,r4,1000adfc <__flash_rwdata_start+0xfffff9e4>
1000ae8c:	003fc906 	br	1000adb4 <__flash_rwdata_start+0xfffff99c>
1000ae90:	00840074 	movhi	r2,4097
1000ae94:	10a32f04 	addi	r2,r2,-29508
1000ae98:	10000f26 	beq	r2,zero,1000aed8 <__call_exitprocs+0x160>
1000ae9c:	99400117 	ldw	r5,4(r19)
1000aea0:	99000017 	ldw	r4,0(r19)
1000aea4:	2800091e 	bne	r5,zero,1000aecc <__call_exitprocs+0x154>
1000aea8:	20000826 	beq	r4,zero,1000aecc <__call_exitprocs+0x154>
1000aeac:	89000015 	stw	r4,0(r17)
1000aeb0:	a8000226 	beq	r21,zero,1000aebc <__call_exitprocs+0x144>
1000aeb4:	a809883a 	mov	r4,r21
1000aeb8:	0008cbc0 	call	10008cbc <free>
1000aebc:	9809883a 	mov	r4,r19
1000aec0:	0008cbc0 	call	10008cbc <free>
1000aec4:	8cc00017 	ldw	r19,0(r17)
1000aec8:	003fbd06 	br	1000adc0 <__flash_rwdata_start+0xfffff9a8>
1000aecc:	9823883a 	mov	r17,r19
1000aed0:	2027883a 	mov	r19,r4
1000aed4:	003fba06 	br	1000adc0 <__flash_rwdata_start+0xfffff9a8>
1000aed8:	dfc00a17 	ldw	ra,40(sp)
1000aedc:	df000917 	ldw	fp,36(sp)
1000aee0:	ddc00817 	ldw	r23,32(sp)
1000aee4:	dd800717 	ldw	r22,28(sp)
1000aee8:	dd400617 	ldw	r21,24(sp)
1000aeec:	dd000517 	ldw	r20,20(sp)
1000aef0:	dcc00417 	ldw	r19,16(sp)
1000aef4:	dc800317 	ldw	r18,12(sp)
1000aef8:	dc400217 	ldw	r17,8(sp)
1000aefc:	dc000117 	ldw	r16,4(sp)
1000af00:	dec00b04 	addi	sp,sp,44
1000af04:	f800283a 	ret

1000af08 <__divsi3>:
1000af08:	20001b16 	blt	r4,zero,1000af78 <__divsi3+0x70>
1000af0c:	000f883a 	mov	r7,zero
1000af10:	28001616 	blt	r5,zero,1000af6c <__divsi3+0x64>
1000af14:	200d883a 	mov	r6,r4
1000af18:	29001a2e 	bgeu	r5,r4,1000af84 <__divsi3+0x7c>
1000af1c:	00800804 	movi	r2,32
1000af20:	00c00044 	movi	r3,1
1000af24:	00000106 	br	1000af2c <__divsi3+0x24>
1000af28:	10000d26 	beq	r2,zero,1000af60 <__divsi3+0x58>
1000af2c:	294b883a 	add	r5,r5,r5
1000af30:	10bfffc4 	addi	r2,r2,-1
1000af34:	18c7883a 	add	r3,r3,r3
1000af38:	293ffb36 	bltu	r5,r4,1000af28 <__flash_rwdata_start+0xfffffb10>
1000af3c:	0005883a 	mov	r2,zero
1000af40:	18000726 	beq	r3,zero,1000af60 <__divsi3+0x58>
1000af44:	0005883a 	mov	r2,zero
1000af48:	31400236 	bltu	r6,r5,1000af54 <__divsi3+0x4c>
1000af4c:	314dc83a 	sub	r6,r6,r5
1000af50:	10c4b03a 	or	r2,r2,r3
1000af54:	1806d07a 	srli	r3,r3,1
1000af58:	280ad07a 	srli	r5,r5,1
1000af5c:	183ffa1e 	bne	r3,zero,1000af48 <__flash_rwdata_start+0xfffffb30>
1000af60:	38000126 	beq	r7,zero,1000af68 <__divsi3+0x60>
1000af64:	0085c83a 	sub	r2,zero,r2
1000af68:	f800283a 	ret
1000af6c:	014bc83a 	sub	r5,zero,r5
1000af70:	39c0005c 	xori	r7,r7,1
1000af74:	003fe706 	br	1000af14 <__flash_rwdata_start+0xfffffafc>
1000af78:	0109c83a 	sub	r4,zero,r4
1000af7c:	01c00044 	movi	r7,1
1000af80:	003fe306 	br	1000af10 <__flash_rwdata_start+0xfffffaf8>
1000af84:	00c00044 	movi	r3,1
1000af88:	003fee06 	br	1000af44 <__flash_rwdata_start+0xfffffb2c>

1000af8c <__modsi3>:
1000af8c:	20001716 	blt	r4,zero,1000afec <__modsi3+0x60>
1000af90:	000f883a 	mov	r7,zero
1000af94:	2005883a 	mov	r2,r4
1000af98:	28001216 	blt	r5,zero,1000afe4 <__modsi3+0x58>
1000af9c:	2900162e 	bgeu	r5,r4,1000aff8 <__modsi3+0x6c>
1000afa0:	01800804 	movi	r6,32
1000afa4:	00c00044 	movi	r3,1
1000afa8:	00000106 	br	1000afb0 <__modsi3+0x24>
1000afac:	30000a26 	beq	r6,zero,1000afd8 <__modsi3+0x4c>
1000afb0:	294b883a 	add	r5,r5,r5
1000afb4:	31bfffc4 	addi	r6,r6,-1
1000afb8:	18c7883a 	add	r3,r3,r3
1000afbc:	293ffb36 	bltu	r5,r4,1000afac <__flash_rwdata_start+0xfffffb94>
1000afc0:	18000526 	beq	r3,zero,1000afd8 <__modsi3+0x4c>
1000afc4:	1806d07a 	srli	r3,r3,1
1000afc8:	11400136 	bltu	r2,r5,1000afd0 <__modsi3+0x44>
1000afcc:	1145c83a 	sub	r2,r2,r5
1000afd0:	280ad07a 	srli	r5,r5,1
1000afd4:	183ffb1e 	bne	r3,zero,1000afc4 <__flash_rwdata_start+0xfffffbac>
1000afd8:	38000126 	beq	r7,zero,1000afe0 <__modsi3+0x54>
1000afdc:	0085c83a 	sub	r2,zero,r2
1000afe0:	f800283a 	ret
1000afe4:	014bc83a 	sub	r5,zero,r5
1000afe8:	003fec06 	br	1000af9c <__flash_rwdata_start+0xfffffb84>
1000afec:	0109c83a 	sub	r4,zero,r4
1000aff0:	01c00044 	movi	r7,1
1000aff4:	003fe706 	br	1000af94 <__flash_rwdata_start+0xfffffb7c>
1000aff8:	00c00044 	movi	r3,1
1000affc:	003ff106 	br	1000afc4 <__flash_rwdata_start+0xfffffbac>

1000b000 <__udivsi3>:
1000b000:	200d883a 	mov	r6,r4
1000b004:	2900152e 	bgeu	r5,r4,1000b05c <__udivsi3+0x5c>
1000b008:	28001416 	blt	r5,zero,1000b05c <__udivsi3+0x5c>
1000b00c:	00800804 	movi	r2,32
1000b010:	00c00044 	movi	r3,1
1000b014:	00000206 	br	1000b020 <__udivsi3+0x20>
1000b018:	10000e26 	beq	r2,zero,1000b054 <__udivsi3+0x54>
1000b01c:	28000516 	blt	r5,zero,1000b034 <__udivsi3+0x34>
1000b020:	294b883a 	add	r5,r5,r5
1000b024:	10bfffc4 	addi	r2,r2,-1
1000b028:	18c7883a 	add	r3,r3,r3
1000b02c:	293ffa36 	bltu	r5,r4,1000b018 <__flash_rwdata_start+0xfffffc00>
1000b030:	18000826 	beq	r3,zero,1000b054 <__udivsi3+0x54>
1000b034:	0005883a 	mov	r2,zero
1000b038:	31400236 	bltu	r6,r5,1000b044 <__udivsi3+0x44>
1000b03c:	314dc83a 	sub	r6,r6,r5
1000b040:	10c4b03a 	or	r2,r2,r3
1000b044:	1806d07a 	srli	r3,r3,1
1000b048:	280ad07a 	srli	r5,r5,1
1000b04c:	183ffa1e 	bne	r3,zero,1000b038 <__flash_rwdata_start+0xfffffc20>
1000b050:	f800283a 	ret
1000b054:	0005883a 	mov	r2,zero
1000b058:	f800283a 	ret
1000b05c:	00c00044 	movi	r3,1
1000b060:	003ff406 	br	1000b034 <__flash_rwdata_start+0xfffffc1c>

1000b064 <__umodsi3>:
1000b064:	2005883a 	mov	r2,r4
1000b068:	2900122e 	bgeu	r5,r4,1000b0b4 <__umodsi3+0x50>
1000b06c:	28001116 	blt	r5,zero,1000b0b4 <__umodsi3+0x50>
1000b070:	01800804 	movi	r6,32
1000b074:	00c00044 	movi	r3,1
1000b078:	00000206 	br	1000b084 <__umodsi3+0x20>
1000b07c:	30000c26 	beq	r6,zero,1000b0b0 <__umodsi3+0x4c>
1000b080:	28000516 	blt	r5,zero,1000b098 <__umodsi3+0x34>
1000b084:	294b883a 	add	r5,r5,r5
1000b088:	31bfffc4 	addi	r6,r6,-1
1000b08c:	18c7883a 	add	r3,r3,r3
1000b090:	293ffa36 	bltu	r5,r4,1000b07c <__flash_rwdata_start+0xfffffc64>
1000b094:	18000626 	beq	r3,zero,1000b0b0 <__umodsi3+0x4c>
1000b098:	1806d07a 	srli	r3,r3,1
1000b09c:	11400136 	bltu	r2,r5,1000b0a4 <__umodsi3+0x40>
1000b0a0:	1145c83a 	sub	r2,r2,r5
1000b0a4:	280ad07a 	srli	r5,r5,1
1000b0a8:	183ffb1e 	bne	r3,zero,1000b098 <__flash_rwdata_start+0xfffffc80>
1000b0ac:	f800283a 	ret
1000b0b0:	f800283a 	ret
1000b0b4:	00c00044 	movi	r3,1
1000b0b8:	003ff706 	br	1000b098 <__flash_rwdata_start+0xfffffc80>

1000b0bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000b0bc:	defffd04 	addi	sp,sp,-12
1000b0c0:	df000215 	stw	fp,8(sp)
1000b0c4:	df000204 	addi	fp,sp,8
1000b0c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000b0cc:	0001883a 	nop
1000b0d0:	e0bfff17 	ldw	r2,-4(fp)
1000b0d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000b0d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000b0dc:	10000226 	beq	r2,zero,1000b0e8 <_exit+0x2c>
    ALT_SIM_FAIL();
1000b0e0:	002af070 	cmpltui	zero,zero,43969
1000b0e4:	00000106 	br	1000b0ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000b0e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000b0ec:	003fff06 	br	1000b0ec <__flash_rwdata_start+0xfffffcd4>
